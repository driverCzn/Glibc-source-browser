<dec f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_cosl.c' l='80' type='const long double []'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_cosl.c' l='118' u='r' c='__kernel_cosl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_cosl.c' l='119' u='r' c='__kernel_cosl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_cosl.c' l='120' u='r' c='__kernel_cosl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_cosl.c' l='121' u='r' c='__kernel_cosl'/>
<dec f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_sinl.c' l='84' type='const long double []'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_sinl.c' l='124' u='r' c='__kernel_sinl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_sinl.c' l='125' u='r' c='__kernel_sinl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_sinl.c' l='126' u='r' c='__kernel_sinl'/>
<use f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/k_sinl.c' l='127' u='r' c='__kernel_sinl'/>
<def f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/t_sincosl.c' l='67' ll='483' type='const long double [332]'/>
<doc f='glibc_src_2.25/sysdeps/ieee754/ldbl-96/t_sincosl.c' l='20'>/* For 0.1484375 + n/128.0, n=0..82 this table contains
   first 64 bits of cosine, then at least 64 additional
   bits and the same for sine.
   0.1484375+82.0/128.0 is the smallest number among above defined numbers
   larger than pi/4.
   Computed using MPFR:

   #include &lt;stdio.h&gt;
   #include &lt;mpfr.h&gt;

   int
   main (void)
   {
     int j;
     mpfr_t t, b, i, rs, rc, ts, tc, tsl, tcl;
     mpfr_init2 (b, 64);
     mpfr_init2 (i, 64);
     mpfr_init2 (t, 64);
     mpfr_set_str (b, &quot;0.1484375&quot;, 0, MPFR_RNDN);
     mpfr_set_str (i, &quot;0x1p-7&quot;, 0, MPFR_RNDN);
     mpfr_init2 (rs, 300);
     mpfr_init2 (rc, 300);
     mpfr_init2 (ts, 64);
     mpfr_init2 (tc, 64);
     mpfr_init2 (tsl, 64);
     mpfr_init2 (tcl, 64);
     for (j = 0; j &lt;= 82; j++)
       {
         mpfr_mul_ui (t, i, j, MPFR_RNDN);
         mpfr_add (t, t, b, MPFR_RNDN);
         printf (&quot;  /&quot; &quot;* x = 0.1484375 + %d/128.  *&quot; &quot;/\n&quot;, j);
         mpfr_cos (rc, t, MPFR_RNDN);
         mpfr_sin (rs, t, MPFR_RNDN);
         mpfr_set (tc, rc, MPFR_RNDN);
         mpfr_set (ts, rs, MPFR_RNDN);
         mpfr_sub (tcl, rc, tc, MPFR_RNDN);
         mpfr_sub (tsl, rs, ts, MPFR_RNDN);
         mpfr_printf (&quot;  %.17RaL,\n&quot;, tc);
         mpfr_printf (&quot;  %.17RaL,\n&quot;, tcl);
         mpfr_printf (&quot;  %.17RaL,\n&quot;, ts);
         mpfr_printf (&quot;  %.17RaL,\n&quot;, tsl);
       }
     return 0;
   }

*/</doc>
