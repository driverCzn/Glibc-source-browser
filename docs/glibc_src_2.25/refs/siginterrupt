<dec f='glibc_src_2.25/signal/signal.h' l='320' type='int siginterrupt(int __sig, int __interrupt)'/>
<doc f='glibc_src_2.25/signal/signal.h' l='317'>/* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   (causing them to fail with EINTR); if INTERRUPT is zero, make system
   calls be restarted after signal SIG.  */</doc>
<def f='glibc_src_2.25/sysdeps/posix/sigintr.c' l='25' ll='54' type='int siginterrupt(int sig, int interrupt)'/>
<doc f='glibc_src_2.25/sysdeps/posix/sigintr.c' l='22'>/* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   (causing them to fail with EINTR); if INTERRUPT is zero, make system
   calls be restarted after signal SIG.  */</doc>
<dec f='include/signal.h' l='314' type='int siginterrupt(int __sig, int __interrupt)'/>
<doc f='include/signal.h' l='311'>/* If INTERRUPT is nonzero, make signal SIG interrupt system calls
   (causing them to fail with EINTR); if INTERRUPT is zero, make system
   calls be restarted after signal SIG.  */</doc>
