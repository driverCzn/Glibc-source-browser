<def f='glibc_src_2.25/posix/getopt.h' l='104' ll='112'/>
<use f='glibc_src_2.25/posix/getopt.h' l='175' c='getopt_long'/>
<use f='glibc_src_2.25/posix/getopt.h' l='179' c='getopt_long_only'/>
<size>32</size>
<doc f='glibc_src_2.25/posix/getopt.h' l='83'>/* Describe the long-named options requested by the application.
   The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector
   of `struct option&apos; terminated by an element containing a name which is
   zero.

   The field `has_arg&apos; is:
   no_argument		(or 0) if the option does not take an argument,
   required_argument	(or 1) if the option requires an argument,
   optional_argument 	(or 2) if the option takes an optional argument.

   If the field `flag&apos; is not NULL, it points to a variable that is set
   to the value given in the field `val&apos; when the option is found, but
   left unchanged if the option is not found.

   To have a long-named option do something other than set an `int&apos; to
   a compiled-in constant, such as set a value from `optarg&apos;, set the
   option&apos;s `flag&apos; field to zero and its `val&apos; field to a nonzero
   value (the equivalent single-letter option character, if there is
   one).  For long options that have a zero `flag&apos; field, `getopt&apos;
   returns the contents of the `val&apos; field.  */</doc>
<mbr r='option::name' o='0' t='const char *'/>
<mbr r='option::has_arg' o='64' t='int'/>
<mbr r='option::flag' o='128' t='int *'/>
<mbr r='option::val' o='192' t='int'/>
<use f='glibc_src_2.25/posix/getopt_int.h' l='24' c='_getopt_internal'/>
<use f='glibc_src_2.25/posix/getopt_int.h' l='114' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt_int.h' l='120' c='_getopt_long_r'/>
<use f='glibc_src_2.25/posix/getopt_int.h' l='125' c='_getopt_long_only_r'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='200' c='find_long_option'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='202' c='find_long_option'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='274'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='304'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='81' c='convert_options'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='81' c='convert_options'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='501' c='parser_init'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='501' c='parser_init'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='81' c='parser_parse_opt'/>
<use f='glibc_src_2.25/argp/argp-parse.c' l='772' c='parser_parse_opt'/>
<size>32</size>
<use f='glibc_src_2.25/posix/getopt.c' l='392' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='528' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='529' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='532' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='876' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='877' c='_getopt_internal_r'/>
<use f='glibc_src_2.25/posix/getopt.c' l='1167' c='_getopt_internal'/>
<use f='glibc_src_2.25/posix/getopt.c' l='1190' c='getopt'/>
<use f='glibc_src_2.25/posix/getopt.c' l='1200' c='__posix_getopt'/>
<size>32</size>
<use f='glibc_src_2.25/posix/getopt1.c' l='63' c='getopt_long'/>
<use f='glibc_src_2.25/posix/getopt1.c' l='70' c='_getopt_long_r'/>
<use f='glibc_src_2.25/posix/getopt1.c' l='84' c='getopt_long_only'/>
<use f='glibc_src_2.25/posix/getopt1.c' l='91' c='_getopt_long_only_r'/>
<size>32</size>
<use f='glibc_src_2.25/support/support_test_main.c' l='38'/>
<use f='glibc_src_2.25/support/support_test_main.c' l='46' c='usage'/>
<use f='glibc_src_2.25/support/support_test_main.c' l='190' c='support_test_main'/>
<size>32</size>
