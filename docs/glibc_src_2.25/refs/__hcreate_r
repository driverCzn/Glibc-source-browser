<dec f='glibc_src_2.25/include/search.h' l='5' type='int __hcreate_r(size_t , struct hsearch_data * )'/>
<use f='glibc_src_2.25/misc/hsearch.c' l='40' u='c' c='hcreate'/>
<def f='glibc_src_2.25/misc/hsearch_r.c' l='62' ll='104' type='int __hcreate_r(size_t nel, struct hsearch_data * htab)'/>
<use f='glibc_src_2.25/misc/hsearch_r.c' l='105' c='__EI___hcreate_r'/>
<use f='glibc_src_2.25/misc/hsearch_r.c' l='105' c='__EI___hcreate_r'/>
<use f='glibc_src_2.25/misc/hsearch_r.c' l='106' c='hcreate_r'/>
<doc f='glibc_src_2.25/misc/hsearch_r.c' l='56'>/* Before using the hash table we must allocate memory for it.
   Test for an existing table are done. We allocate one element
   more as the found prime number says. This is done for more effective
   indexing as explained in the comment for the hsearch function.
   The contents of the table is zeroed, especially the field used
   becomes zero.  */</doc>
