<dec f='glibc_src_2.25/elf/dl-load.h' l='115' type='const char * _dl_map_segments(struct link_map * l, int fd, const Elf64_Ehdr * header, int type, const struct loadcmd * loadcmds, size_t nloadcmds, const size_t maplength, _Bool has_holes, struct link_map * loader)'/>
<def f='glibc_src_2.25/elf/dl-map-segments.h' l='28' ll='153' type='const char * _dl_map_segments(struct link_map * l, int fd, const Elf64_Ehdr * header, int type, const struct loadcmd * loadcmds, size_t nloadcmds, const size_t maplength, _Bool has_holes, struct link_map * loader)'/>
<use f='glibc_src_2.25/elf/dl-load.c' l='1177' u='c' c='_dl_map_object_from_fd'/>
<doc f='glibc_src_2.25/elf/dl-load.h' l='103'>/* This is a subroutine of _dl_map_object_from_fd.  It is responsible
   for filling in several fields in *L: l_map_start, l_map_end, l_addr,
   l_contiguous, l_text_end, l_phdr.  On successful return, all the
   segments are mapped (or copied, or whatever) from the file into their
   final places in the address space, with the correct page permissions,
   and any bss-like regions already zeroed.  It returns a null pointer
   on success, or an error message string (to be translated) on error
   (having also set errno).

   The file &lt;dl-map-segments.h&gt; defines this function.  The canonical
   implementation in elf/dl-map-segments.h might be replaced by a sysdeps
   version.  */</doc>
<doc f='glibc_src_2.25/elf/dl-map-segments.h' l='21'>/* This implementation assumes (as does the corresponding implementation
   of _dl_unmap_segments, in dl-unmap-segments.h) that shared objects
   are always laid out with all segments contiguous (or with gaps
   between them small enough that it&apos;s preferable to reserve all whole
   pages inside the gaps with PROT_NONE mappings rather than permitting
   other use of those parts of the address space).  */</doc>
