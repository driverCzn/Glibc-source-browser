<dec f='glibc_src_2.25/include/rpc/clnt.h' l='9' type='CLIENT * __libc_clntudp_bufcreate(struct sockaddr_in * __raddr, u_long __program, u_long __version, struct timeval __wait_resend, int * __sockp, u_int __sendsz, u_int __recvsz, int __flags)'/>
<use f='glibc_src_2.25/nis/ypclnt.c' l='71' u='c' c='yp_bind_client_create'/>
<def f='glibc_src_2.25/sunrpc/clnt_udp.c' l='121' ll='208' type='CLIENT * __libc_clntudp_bufcreate(struct sockaddr_in * raddr, u_long program, u_long version, struct timeval wait, int * sockp, u_int sendsz, u_int recvsz, int flags)'/>
<use f='glibc_src_2.25/sunrpc/clnt_udp.c' l='210' c='__EI___libc_clntudp_bufcreate'/>
<use f='glibc_src_2.25/sunrpc/clnt_udp.c' l='210' c='__EI___libc_clntudp_bufcreate'/>
<use f='glibc_src_2.25/sunrpc/clnt_udp.c' l='220' u='c' c='__GI_clntudp_bufcreate'/>
<use f='glibc_src_2.25/sunrpc/clnt_udp.c' l='229' u='c' c='__GI_clntudp_create'/>
<doc f='glibc_src_2.25/sunrpc/clnt_udp.c' l='105'>/*
 * Create a UDP based client handle.
 * If *sockp&lt;0, *sockp is set to a newly created UPD socket.
 * If raddr-&gt;sin_port is 0 a binder on the remote machine
 * is consulted for the correct port number.
 * NB: It is the clients responsibility to close *sockp.
 * NB: The rpch-&gt;cl_auth is initialized to null authentication.
 *     Caller may wish to set this something more useful.
 *
 * wait is the amount of time used between retransmitting a call if
 * no response has been heard; retransmission occurs until the actual
 * rpc call times out.
 *
 * sendsz and recvsz are the maximum allowable packet sizes that can be
 * sent and received.
 */</doc>
