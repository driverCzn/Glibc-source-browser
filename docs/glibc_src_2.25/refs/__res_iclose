<use f='glibc_src_2.25/resolv/res_data.c' l='136' u='c' c='__res_close'/>
<def f='glibc_src_2.25/resolv/res_init.c' l='498' ll='518' type='void __res_iclose(res_state statp, _Bool free_addr)'/>
<use f='glibc_src_2.25/resolv/res_init.c' l='524' u='c' c='__res_nclose'/>
<use f='glibc_src_2.25/resolv/res_init.c' l='536' u='c' c='res_thread_freeres'/>
<doc f='glibc_src_2.25/resolv/res_init.c' l='491'>/*
 * This routine is for closing the socket if a virtual circuit is used and
 * the program wants to close it.  This provides support for endhostent()
 * which expects to close the socket.
 *
 * This routine is not expected to be user visible.
 */</doc>
<use f='glibc_src_2.25/resolv/res_libc.c' l='72' u='c' c='__res_init'/>
<use f='glibc_src_2.25/resolv/res_libc.c' l='98' u='c' c='__res_maybe_init'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='396' u='c' c='__libc_res_nsend'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='518' u='c' c='__libc_res_nsend'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='524' u='c' c='__libc_res_nsend'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='567' u='c' c='close_and_return_error'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='686' u='c' c='send_vc'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='693' u='c' c='send_vc'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='766' u='c' c='send_vc'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='943' u='c' c='reopen'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='1106' u='c' c='send_dg'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='1396' u='c' c='send_dg'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='1415' u='c' c='send_dg'/>
<use f='glibc_src_2.25/resolv/res_send.c' l='1432' u='c' c='send_dg'/>
<use f='glibc_src_2.25/support/resolv_test.c' l='1165' u='c' c='resolv_test_start'/>
