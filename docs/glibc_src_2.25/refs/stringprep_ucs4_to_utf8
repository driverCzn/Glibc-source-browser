<dec f='glibc_src_2.25/libidn/stringprep.h' l='191' type='char * stringprep_ucs4_to_utf8(const uint32_t * str, ssize_t len, size_t * items_read, size_t * items_written)'/>
<use f='glibc_src_2.25/libidn/idna.c' l='110' u='c' c='idna_to_ascii_4i'/>
<use f='glibc_src_2.25/libidn/idna.c' l='420' u='c' c='idna_to_unicode_44i'/>
<use f='glibc_src_2.25/libidn/idna.c' l='718' u='c' c='idna_to_unicode_8z8z'/>
<def f='glibc_src_2.25/libidn/nfkc.c' l='999' ll='1005' type='char * stringprep_ucs4_to_utf8(const uint32_t * str, ssize_t len, size_t * items_read, size_t * items_written)'/>
<use f='glibc_src_2.25/libidn/nfkc.c' l='1052' u='c' c='stringprep_ucs4_nfkc_normalize'/>
<doc f='glibc_src_2.25/libidn/nfkc.c' l='981'>/**
 * stringprep_ucs4_to_utf8:
 * @str: a UCS-4 encoded string
 * @len: the maximum length of @str to use. If @len &lt; 0, then
 *       the string is terminated with a 0 character.
 * @items_read: location to store number of characters read read, or %NULL.
 * @items_written: location to store number of bytes written or %NULL.
 *                 The value here stored does not include the trailing 0
 *                 byte.
 *
 * Convert a string from a 32-bit fixed width representation as UCS-4.
 * to UTF-8. The result will be terminated with a 0 byte.
 *
 * Return value: a pointer to a newly allocated UTF-8 string.
 *               This value must be freed with free(). If an
 *               error occurs, %NULL will be returned and
 *               @error set.
 **/</doc>
<use f='glibc_src_2.25/libidn/stringprep.c' l='389' u='c' c='stringprep'/>
