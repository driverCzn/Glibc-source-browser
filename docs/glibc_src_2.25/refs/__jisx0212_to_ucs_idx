<dec f='glibc_src_2.25/iconvdata/jis0212.h' l='37' type='const struct jisx0212_idx []'/>
<use f='glibc_src_2.25/iconvdata/jis0212.h' l='48' u='r' c='jisx0212_to_ucs4'/>
<doc f='glibc_src_2.25/iconvdata/jis0212.h' l='36'>/* Conversion table.  */</doc>
<def f='glibc_src_2.25/iconvdata/jis0212.c' l='55' ll='69' type='const struct jisx0212_idx [12]'/>
<doc f='glibc_src_2.25/iconvdata/jis0212.c' l='24'>/* The defined JIS 0201 positions contains large gaps.  It&apos;s better to
   avoid using one large table with such big gaps.  Instead we match each
   char in a table resulting in an index to a table with the UCS.  The
   following command can be used to generate the table:

   egrep &apos;^0x[[:xdigit:]][[:xdigit:]][[:xdigit:]][[:xdigit:]]&apos; \
     .../eastasia/jis/jis0212.txt | perl tab.pl

   where tab.pl is

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   $first=$last=$idx=0;
   while (&lt;&gt;) {
     local($jis,$ucs,%rest) = split;
     local($u)=hex($ucs);
     local($j)=hex($jis);
     local($k) = int(($j - 0x2121) / 256) * 94 + (($j - 0x2121) % 256);
     if ($k - $last &gt; 6) {
       if ($last != 0) {
	 printf (&quot; { .start = %#06x, .end = %#06x, .idx = %5d },\n&quot;,
		 $first, $last, $idx);
	 $idx += $last - $first + 1;
       }
       $first=$k;
     }
     $last=$k;
   }
   printf (&quot; { .start = %#06x, .end = %#06x, .idx = %5d }\n&quot;,
	   $first, $last, $idx);
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/</doc>
