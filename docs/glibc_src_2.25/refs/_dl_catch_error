<dec f='glibc_src_2.25/sysdeps/generic/ldsodefs.h' l='773' type='int _dl_catch_error(const char ** objname, const char ** errstring, _Bool * mallocedp, void (*)(void *) operate, void * args)'/>
<dec f='glibc_src_2.25/sysdeps/generic/ldsodefs.h' l='777' type='int _dl_catch_error(const char ** , const char ** , _Bool * , void (*)(void *) , void * )'/>
<use f='glibc_src_2.25/sysdeps/generic/ldsodefs.h' l='777' c='_dl_catch_error'/>
<doc f='glibc_src_2.25/sysdeps/generic/ldsodefs.h' l='765'>/* Call OPERATE, catching errors from `dl_signal_error&apos;.  If there is no
   error, *ERRSTRING is set to null.  If there is an error, *ERRSTRING is
   set to a string constructed from the strings passed to _dl_signal_error,
   and the error code passed is the return value and *OBJNAME is set to
   the object name which experienced the problems.  ERRSTRING if nonzero
   points to a malloc&apos;ed string which the caller has to free after use.
   ARGS is passed as argument to OPERATE.  MALLOCEDP is set to true only
   if the returned string is allocated using the libc&apos;s malloc.  */</doc>
<use f='glibc_src_2.25/dlfcn/dlerror.c' l='163' u='c' c='_dlerror_run'/>
<use f='glibc_src_2.25/elf/dl-deps.c' l='254' u='c' c='_dl_map_object_deps'/>
<use f='glibc_src_2.25/elf/dl-deps.c' l='317' u='c' c='_dl_map_object_deps'/>
<def f='glibc_src_2.25/elf/dl-error-skeleton.c' l='171' ll='210' type='int _dl_catch_error(const char ** objname, const char ** errstring, _Bool * mallocedp, void (*)(void *) operate, void * args)'/>
<use f='glibc_src_2.25/elf/dl-libc.c' l='46' u='c' c='dlerror_run'/>
<use f='glibc_src_2.25/elf/dl-open.c' l='649' u='c' c='_dl_open'/>
<use f='glibc_src_2.25/elf/dl-sym.c' l='126' u='c' c='do_sym'/>
<use f='glibc_src_2.25/elf/rtld.c' l='759' u='c' c='do_preload'/>
<use f='glibc_src_2.25/elf/rtld.c' l='1040' u='c' c='dl_main'/>
<use f='glibc_src_2.25/elf/rtld.c' l='1423' u='c' c='dl_main'/>
<use f='glibc_src_2.25/elf/rtld.c' l='1441' u='c' c='dl_main'/>
<use f='glibc_src_2.25/elf/rtld.c' l='1483' u='c' c='dl_main'/>
