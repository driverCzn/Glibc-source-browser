<def f='glibc_src_2.25/sunrpc/svc_unix.c' l='149' ll='203' type='SVCXPRT * svcunix_create(int sock, u_int sendsize, u_int recvsize, char * path)'/>
<use f='glibc_src_2.25/sunrpc/svc_unix.c' l='204' c='__EI_svcunix_create'/>
<doc f='glibc_src_2.25/sunrpc/svc_unix.c' l='129'>/*
 * Usage:
 *      xprt = svcunix_create(sock, send_buf_size, recv_buf_size);
 *
 * Creates, registers, and returns a (rpc) unix based transporter.
 * Once *xprt is initialized, it is registered as a transporter
 * see (svc.h, xprt_register).  This routine returns
 * a NULL if a problem occurred.
 *
 * If sock&lt;0 then a socket is created, else sock is used.
 * If the socket, sock is not bound to a port then svcunix_create
 * binds it to an arbitrary port.  The routine then starts a unix
 * listener on the socket&apos;s associated port.  In any (successful) case,
 * xprt-&gt;xp_sock is the registered socket number and xprt-&gt;xp_port is the
 * associated port number.
 *
 * Since unix streams do buffered io similar to stdio, the caller can specify
 * how big the send and receive buffers are via the second and third parms;
 * 0 =&gt; use the system default.
 */</doc>
