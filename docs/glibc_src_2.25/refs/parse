<dec f='glibc_src_2.25/posix/regcomp.c' l='65' type='bin_tree_t * parse(re_string_t * regexp, regex_t * preg, reg_syntax_t syntax, reg_errcode_t * err)'/>
<use f='glibc_src_2.25/posix/regcomp.c' l='786' u='c' c='re_compile_internal'/>
<def f='glibc_src_2.25/posix/regcomp.c' l='2097' ll='2120' type='bin_tree_t * parse(re_string_t * regexp, regex_t * preg, reg_syntax_t syntax, reg_errcode_t * err)'/>
<doc f='glibc_src_2.25/posix/regcomp.c' l='2085'>/* Entry point of the parser.
   Parse the regular expression REGEXP and return the structure tree.
   If an error occurs, ERR is set by error code, and return NULL.
   This function build the following tree, from regular expression &lt;reg_exp&gt;:
	   CAT
	   / \
	  /   \
   &lt;reg_exp&gt;  EOR

   CAT means concatenation.
   EOR means end of regular expression.  */</doc>
