<def f='glibc_src_2.25/support/capture_subprocess.h' l='24' ll='29'/>
<dec f='glibc_src_2.25/support/capture_subprocess.h' l='35' type='struct support_capture_subprocess support_capture_subprocess(void (*)(void *) callback, void * closure)'/>
<use f='glibc_src_2.25/support/capture_subprocess.h' l='35' c='support_capture_subprocess'/>
<use f='glibc_src_2.25/support/capture_subprocess.h' l='40' c='support_capture_subprocess_free'/>
<use f='glibc_src_2.25/support/capture_subprocess.h' l='56' c='support_capture_subprocess_check'/>
<def f='glibc_src_2.25/support/support_capture_subprocess.c' l='53' ll='101' type='struct support_capture_subprocess support_capture_subprocess(void (*)(void *) callback, void * closure)'/>
<use f='glibc_src_2.25/support/support_capture_subprocess.c' l='53' c='support_capture_subprocess'/>
<use f='glibc_src_2.25/support/support_capture_subprocess.c' l='56' c='support_capture_subprocess'/>
<use f='glibc_src_2.25/support/support_capture_subprocess.c' l='104' c='support_capture_subprocess_free'/>
<size>56</size>
<doc f='glibc_src_2.25/support/capture_subprocess.h' l='31'>/* Invoke CALLBACK (CLOSURE) in a subprocess and capture standard
   output, standard error, and the exit status.  The out.buffer and
   err.buffer members in the result are null-terminated strings which
   can be examined by the caller (out.out and err.out are NULL).  */</doc>
<mbr r='support_capture_subprocess::out' o='0' t='struct xmemstream'/>
<mbr r='support_capture_subprocess::err' o='192' t='struct xmemstream'/>
<mbr r='support_capture_subprocess::status' o='384' t='int'/>
<use f='glibc_src_2.25/support/support_capture_subprocess_check.c' l='35' c='support_capture_subprocess_check'/>
<size>56</size>
