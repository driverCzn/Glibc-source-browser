<dec f='glibc_src_2.23/posix/regex.h' l='473' type='const char * re_compile_pattern(const char * __pattern, size_t __length, struct re_pattern_buffer * __buffer)'/>
<doc f='glibc_src_2.23/posix/regex.h' l='465'>/* Compile the regular expression PATTERN, with length LENGTH
   and syntax given by the global `re_syntax_options&apos;, into the buffer
   BUFFER.  Return NULL if successful, and an error string if not.

   To free the allocated storage, you must call `regfree&apos; on BUFFER.
   Note that the translate table must either have been initialised by
   `regcomp&apos;, with a malloc&apos;ed value, or set to NULL before calling
   `regfree&apos;.  */</doc>
<def f='glibc_src_2.23/posix/regcomp.c' l='239' macro='1' type='const char * re_compile_pattern(const char * , size_t , struct re_pattern_buffer * )'/>
