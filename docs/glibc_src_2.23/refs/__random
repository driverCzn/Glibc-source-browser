<dec f='glibc_src_2.23/include/stdlib.h' l='45' type='long __random()'/>
<use f='glibc_src_2.23/stdlib/rand.c' l='27' u='c' c='rand'/>
<def f='glibc_src_2.23/stdlib/random.c' l='286' ll='298' type='long __random()'/>
<use f='glibc_src_2.23/stdlib/random.c' l='300' c='random'/>
<doc f='glibc_src_2.23/stdlib/random.c' l='275'>/* If we are using the trivial TYPE_0 R.N.G., just do the old linear
   congruential bit.  Otherwise, we do our fancy trinomial stuff, which is the
   same in all the other cases due to all the global variables that have been
   set up.  The basic operation is to add the number at the rear pointer into
   the one at the front pointer.  Then both pointers are advanced to the next
   location cyclically in the table.  The value returned is the sum generated,
   reduced to 31 bits by throwing away the &quot;least random&quot; low bit.
   Note: The code takes advantage of the fact that both the front and
   rear pointers can&apos;t wrap on the same call by not testing the rear
   pointer if the front one has wrapped.  Returns a 31-bit random number.  */</doc>
