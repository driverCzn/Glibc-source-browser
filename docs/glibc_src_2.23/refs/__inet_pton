<dec f='glibc_src_2.23/include/arpa/inet.h' l='10' type='int __inet_pton(int , const char *restrict , void *restrict )'/>
<def f='glibc_src_2.23/resolv/inet_pton.c' l='51' ll='64' type='int __inet_pton(int af, const char * src, void * dst)'/>
<use f='glibc_src_2.23/resolv/inet_pton.c' l='66' c='inet_pton'/>
<doc f='glibc_src_2.23/resolv/inet_pton.c' l='40'>/* int
 * inet_pton(af, src, dst)
 *	convert from presentation format (which usually means ASCII printable)
 *	to network format (which is usually some kind of binary format).
 * return:
 *	1 if the address was valid for the specified address family
 *	0 if the address wasn&apos;t valid (`dst&apos; is untouched in this case)
 *	-1 if some other error occurred (`dst&apos; is untouched in this case, too)
 * author:
 *	Paul Vixie, 1996.
 */</doc>
<use f='glibc_src_2.23/resolv/res_init.c' l='315' u='c' c='__res_vinit'/>
