<dec f='glibc_src_2.23/libidn/idna.h' l='63' type='int idna_to_ascii_4i(const uint32_t * in, size_t inlen, char * out, int flags)'/>
<doc f='glibc_src_2.23/libidn/idna.h' l='62'>/* Core functions */</doc>
<def f='glibc_src_2.23/libidn/idna.c' l='67' ll='257' type='int idna_to_ascii_4i(const uint32_t * in, size_t inlen, char * out, int flags)'/>
<use f='glibc_src_2.23/libidn/idna.c' l='353' u='c' c='idna_to_unicode_internal'/>
<use f='glibc_src_2.23/libidn/idna.c' l='500' u='c' c='idna_to_ascii_4z'/>
<doc f='glibc_src_2.23/libidn/idna.c' l='37'>/**
 * idna_to_ascii_4i
 * @in: input array with unicode code points.
 * @inlen: length of input array with unicode code points.
 * @out: output zero terminated string that must have room for at
 *       least 63 characters plus the terminating zero.
 * @flags: IDNA flags, e.g. IDNA_ALLOW_UNASSIGNED or IDNA_USE_STD3_ASCII_RULES.
 *
 * The ToASCII operation takes a sequence of Unicode code points that make
 * up one label and transforms it into a sequence of code points in the
 * ASCII range (0..7F). If ToASCII succeeds, the original sequence and the
 * resulting sequence are equivalent labels.
 *
 * It is important to note that the ToASCII operation can fail. ToASCII
 * fails if any step of it fails. If any step of the ToASCII operation
 * fails on any label in a domain name, that domain name MUST NOT be used
 * as an internationalized domain name. The method for deadling with this
 * failure is application-specific.
 *
 * The inputs to ToASCII are a sequence of code points, the AllowUnassigned
 * flag, and the UseSTD3ASCIIRules flag. The output of ToASCII is either a
 * sequence of ASCII code points or a failure condition.
 *
 * ToASCII never alters a sequence of code points that are all in the ASCII
 * range to begin with (although it could fail). Applying the ToASCII
 * operation multiple times has exactly the same effect as applying it just
 * once.
 *
 * Return value: Returns 0 on success, or an error code.
 */</doc>
