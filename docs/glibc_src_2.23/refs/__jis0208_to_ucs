<dec f='glibc_src_2.23/iconvdata/jis0208.h' l='36' type='const uint16_t []'/>
<use f='glibc_src_2.23/iconvdata/jis0208.h' l='71' u='r' c='jisx0208_to_ucs4'/>
<doc f='glibc_src_2.23/iconvdata/jis0208.h' l='35'>/* Conversion table.  */</doc>
<def f='glibc_src_2.23/iconvdata/jis0208.c' l='60' ll='1782' type='const uint16_t [7808]'/>
<doc f='glibc_src_2.23/iconvdata/jis0208.c' l='25'>/* We use one big table for the mapping.  We know that the first byte
   is in range 0x21 to 0xea.  The second byte never is in the ranges
   0x00 to 0x20 and 0x7f to 0xff.  Compacting the table by excluding
   these ranges we get a table with only this gaps:

   at	0x222e	0x2241	0x2250	0x226a	0x2279	0x2321	0x2339	0x235a
   len	12	9	12	8	5	15	8	7

   at	0x237a	0x2473	0x2576	0x2638	0x2658	0x2741	0x2771	0x2840
   len	4	11	8	9	38	16	13	62

   at	0x4f53
   len	43

   It&apos;s not worth trying to use these gaps.  The table can be generated
   using

   egrep &apos;^0x&apos; &lt; .../eastasia/jis/jis0208.txt |
   perl tab.pl

   with tab.pl containing:
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   $n=0;
   while (&lt;&gt;) {
     local($sjis, $jis, $ucs4, %rest) = split;
     local($u)=hex($ucs4);
     local($s)=hex($jis);
     printf (&quot;\n &quot;) if ($n % 4 eq 0);
     ++$n;
     printf (&quot; [0x%04x] = 0x%04x,&quot;,
	     int(($s - 0x2121) / 256) * 94 + (($s - 0x2121) &amp; 0xff), $u);
   }
   printf (&quot;\n&quot;);
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/</doc>
