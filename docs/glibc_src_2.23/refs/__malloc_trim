<dec f='glibc_src_2.23/malloc/malloc.c' l='700' type='int __malloc_trim(size_t )'/>
<def f='glibc_src_2.23/malloc/malloc.c' l='4549' ll='4569' type='int __malloc_trim(size_t s)'/>
<use f='glibc_src_2.23/malloc/malloc.c' l='5231' c='malloc_trim'/>
<doc f='glibc_src_2.23/malloc/malloc.c' l='676'>/*
  malloc_trim(size_t pad);

  If possible, gives memory back to the system (via negative
  arguments to sbrk) if there is unused memory at the `high&apos; end of
  the malloc pool. You can call this after freeing large blocks of
  memory to potentially reduce the system-level memory requirements
  of a program. However, it cannot guarantee to reduce memory. Under
  some allocation patterns, some large free blocks of memory will be
  locked between two used chunks, so they cannot be given back to
  the system.

  The `pad&apos; argument to malloc_trim represents the amount of free
  trailing space to leave untrimmed. If this argument is zero,
  only the minimum amount of memory to maintain internal data
  structures will be left (one page or less). Non-zero arguments
  can be supplied to maintain enough trailing space to service
  future expected allocations without having to re-obtain memory
  from the system.

  Malloc_trim returns 1 if it actually released any memory, else 0.
  On systems that do not support &quot;negative sbrks&quot;, it will always
  return 0.
*/</doc>
