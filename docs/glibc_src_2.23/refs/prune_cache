<dec f='glibc_src_2.23/nscd/nscd.h' l='285' type='time_t prune_cache(struct database_dyn * table, time_t now, int fd)'/>
<def f='glibc_src_2.23/nscd/cache.c' l='247' ll='540' type='time_t prune_cache(struct database_dyn * table, time_t now, int fd)'/>
<doc f='glibc_src_2.23/nscd/cache.c' l='235'>/* Walk through the table and remove all entries which lifetime ended.

   We have a problem here.  To actually remove the entries we must get
   the write-lock.  But since we want to keep the time we have the
   lock as short as possible we cannot simply acquire the lock when we
   start looking for timedout entries.

   Therefore we do it in two stages: first we look for entries which
   must be invalidated and remember them.  Then we get the lock and
   actually remove them.  This is complicated by the way we have to
   free the data structures since some hash table entries share the same
   data.  */</doc>
<use f='glibc_src_2.23/nscd/connections.c' l='1028' u='c' c='invalidate_cache'/>
<use f='glibc_src_2.23/nscd/connections.c' l='1603' u='c' c='nscd_run_prune'/>
