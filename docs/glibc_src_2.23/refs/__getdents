<dec f='glibc_src_2.23/include/dirent.h' l='38' type='__ssize_t __getdents(int __fd, char * __buf, size_t __nbytes)'/>
<def f='glibc_src_2.23/sysdeps/unix/sysv/linux/getdents.c' l='93' ll='301' type='__ssize_t __getdents(int fd, char * buf, size_t nbytes)'/>
<use f='glibc_src_2.23/sysdeps/unix/sysv/linux/wordsize-64/getdents.c' l='4' c='__getdents64'/>
<doc f='glibc_src_2.23/sysdeps/unix/sysv/linux/getdents.c' l='85'>/* The problem here is that we cannot simply read the next NBYTES
   bytes.  We need to take the additional field into account.  We use
   some heuristic.  Assuming the directory contains names with 14
   characters on average we can compute an estimated number of entries
   which fit in the buffer.  Taking this number allows us to specify a
   reasonable number of bytes to read.  If we should be wrong, we can
   reset the file descriptor.  In practice the kernel is limiting the
   amount of data returned much more then the reduced buffer size.  */</doc>
<use f='glibc_src_2.23/sysdeps/unix/sysv/linux/getdirentries.c' l='23' u='c' c='getdirentries'/>
<use f='glibc_src_2.23/sysdeps/posix/readdir.c' l='31' u='c' c='__readdir'/>
<use f='glibc_src_2.23/sysdeps/posix/readdir_r.c' l='31' u='c' c='__readdir_r'/>
