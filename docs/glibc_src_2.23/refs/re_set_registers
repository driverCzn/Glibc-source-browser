<dec f='glibc_src_2.23/posix/regex.h' l='526' type='void re_set_registers(struct re_pattern_buffer * __buffer, struct re_registers * __regs, unsigned int __num_regs, regoff_t * __starts, regoff_t * __ends)'/>
<doc f='glibc_src_2.23/posix/regex.h' l='514'>/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
   ENDS.  Subsequent matches using BUFFER and REGS will use this memory
   for recording register information.  STARTS and ENDS must be
   allocated with malloc, and must each be at least `NUM_REGS * sizeof
   (regoff_t)&apos; bytes long.

   If NUM_REGS == 0, then subsequent matches should allocate their own
   register data.

   Unless this function is called, the first search or match using
   PATTERN_BUFFER will allocate its own register data, without
   freeing the old data.  */</doc>
<def f='glibc_src_2.23/posix/regexec.c' l='579' macro='1' type='void re_set_registers(struct re_pattern_buffer * , struct re_registers * , unsigned int , regoff_t * , regoff_t * )'/>
