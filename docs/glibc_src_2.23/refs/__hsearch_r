<dec f='glibc_src_2.23/include/search.h' l='9' type='int __hsearch_r(ENTRY , ACTION , ENTRY ** , struct hsearch_data * )'/>
<use f='glibc_src_2.23/misc/hsearch.c' l='31' u='c' c='hsearch'/>
<def f='glibc_src_2.23/misc/hsearch_r.c' l='143' ll='228' type='int __hsearch_r(ENTRY item, ACTION action, ENTRY ** retval, struct hsearch_data * htab)'/>
<use f='glibc_src_2.23/misc/hsearch_r.c' l='230' c='hsearch_r'/>
<doc f='glibc_src_2.23/misc/hsearch_r.c' l='130'>/* This is the search function. It uses double hashing with open addressing.
   The argument item.key has to be a pointer to an zero terminated, most
   probably strings of chars. The function for generating a number of the
   strings is simple but fast. It can be replaced by a more complex function
   like ajw (see [Aho,Sethi,Ullman]) if the needs are shown.

   We use an trick to speed up the lookup. The table is created by hcreate
   with one more element available. This enables us to use the index zero
   special. This index will never be used because we store the first hash
   index in the field used where zero means not used. Every other value
   means used. The used field can be used as a first fast comparison for
   equality of the stored and the parameter value. This helps to prevent
   unnecessary expensive calls of strcmp.  */</doc>
