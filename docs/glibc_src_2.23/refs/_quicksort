<dec f='glibc_src_2.23/include/stdlib.h' l='95' type='void _quicksort(void *const pbase, size_t total_elems, size_t size, __compar_d_fn_t cmp, void * arg)'/>
<use f='glibc_src_2.23/stdlib/msort.c' l='216' u='c' c='__qsort_r'/>
<use f='glibc_src_2.23/stdlib/msort.c' l='228' u='c' c='__qsort_r'/>
<def f='glibc_src_2.23/stdlib/qsort.c' l='88' ll='249' type='void _quicksort(void *const pbase, size_t total_elems, size_t size, __compar_d_fn_t cmp, void * arg)'/>
<doc f='glibc_src_2.23/stdlib/qsort.c' l='64'>/* Order size using quicksort.  This implementation incorporates
   four optimizations discussed in Sedgewick:

   1. Non-recursive, using an explicit stack of pointer that store the
      next array partition to sort.  To save time, this maximum amount
      of space required to store an array of SIZE_MAX is allocated on the
      stack.  Assuming a 32-bit (64 bit) integer for size_t, this needs
      only 32 * sizeof(stack_node) == 256 bytes (for 64 bit: 1024 bytes).
      Pretty cheap, actually.

   2. Chose the pivot element using a median-of-three decision tree.
      This reduces the probability of selecting a bad pivot value and
      eliminates certain extraneous comparisons.

   3. Only quicksorts TOTAL_ELEMS / MAX_THRESH partitions, leaving
      insertion sort to order the MAX_THRESH items within each partition.
      This is a big win, since insertion sort is faster for small, mostly
      sorted array segments.

   4. The larger of the two sub-partitions is always pushed onto the
      stack first, with the algorithm then concentrating on the
      smaller partition.  This *guarantees* no more than log (total_elems)
      stack size is needed (actually O(1) in this case)!  */</doc>
