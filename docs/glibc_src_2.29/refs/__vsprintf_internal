<dec f='glibc_src_2.29/libio/libioP.h' l='685' type='int __vsprintf_internal(char * string, size_t maxlen, const char * format, struct __va_list_tag * ap, unsigned int mode_flags)'/>
<doc f='glibc_src_2.29/libio/libioP.h' l='680'>/* Note: __vsprintf_internal, unlike vsprintf, does take a maxlen argument,
   because it&apos;s called by both vsprintf and vsprintf_chk.  If maxlen is
   not set to -1, overrunning the buffer will cause a prompt crash.
   This is the behavior of ordinary (v)sprintf functions, thus they call
   __vsprintf_internal with that argument set to -1.  */</doc>
<use f='glibc_src_2.29/debug/sprintf_chk.c' l='40' u='c' c='___sprintf_chk'/>
<use f='glibc_src_2.29/debug/vsprintf_chk.c' l='35' u='c' c='___vsprintf_chk'/>
<def f='glibc_src_2.29/libio/iovsprintf.c' l='68' ll='100' type='int __vsprintf_internal(char * string, size_t maxlen, const char * format, struct __va_list_tag * args, unsigned int mode_flags)'/>
<use f='glibc_src_2.29/libio/iovsprintf.c' l='105' u='c' c='__vsprintf'/>
<doc f='glibc_src_2.29/libio/iovsprintf.c' l='62'>/* This function is called by regular vsprintf with maxlen set to -1,
   and by vsprintf_chk with maxlen set to the size of the output
   string.  In the former case, _IO_str_chk_overflow will never be
   called; in the latter case it will crash the program if the buffer
   overflows.  */</doc>
<use f='glibc_src_2.29/stdio-common/sprintf.c' l='30' u='c' c='__sprintf'/>
