<dec f='glibc_src_2.29/include/loop_unroll.h' l='53'/>
<doc f='glibc_src_2.29/include/loop_unroll.h' l='22'>/* Loop unroll macro to be used for explicit force loop unrolling with a
   configurable number of iterations.  The idea is to make the loop unrolling
   independent of whether the compiler is able to unroll through specific
   optimizations options (-funroll-loops or -funroll-all-loops).

   For instance, to implement strcpy with SRC being the source input and
   DEST the destination buffer, it is expected the macro to be used in this
   way:

     #define ITERATION(index)	\
       ({ char c = *str++; *dest++ = c; c != &apos;\0&apos; })

     while (1)
       UNROLL_REPEAT (4, ITERATION)

   The loop will be manually unrolled 4 times.  Another option is to do
   the index update after the tests:

     #define ITERATION(index)	\
       ({ char c = *(str + index); *(dest + index) = c; c != &apos;\0&apos; })
     #define UPDATE(n)		\
       str += n; dst += n

     while (1)
       UNROLL_REPEAT_UPDATE (4, ITERATION, UPDATE)

   The loop will be manually unrolled 4 times and the SRC and DEST pointers
   will be updated only after the last iteration.

   Currently, both macros unroll the loop 8 times at maximum.  */</doc>
