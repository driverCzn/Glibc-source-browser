<dec f='glibc_src_2.29/stdlib/gmp.h' l='399' macro='1' type='mp_limb_t __mpn_divrem(mp_ptr , mp_size_t , mp_ptr , mp_size_t , mp_srcptr , mp_size_t )'/>
<dec f='glibc_src_2.29/include/gmp.h' l='48' macro='1' type='mp_limb_t __mpn_divrem(mp_ptr , mp_size_t , mp_ptr , mp_size_t , mp_srcptr , mp_size_t )'/>
<use f='glibc_src_2.29/include/gmp.h' l='48' macro='1' c='__mpn_divrem'/>
<use f='glibc_src_2.29/stdio-common/printf_fp.c' l='179' macro='1' u='c' c='hack_digit'/>
<def f='glibc_src_2.29/stdlib/divrem.c' l='43' macro='1' type='mp_limb_t __mpn_divrem(mp_ptr qp, mp_size_t qextra_limbs, mp_ptr np, mp_size_t nsize, mp_srcptr dp, mp_size_t dsize)'/>
<doc f='glibc_src_2.29/stdlib/divrem.c' l='26'>/* Divide num (NP/NSIZE) by den (DP/DSIZE) and write
   the NSIZE-DSIZE least significant quotient limbs at QP
   and the DSIZE long remainder at NP.  If QEXTRA_LIMBS is
   non-zero, generate that many fraction bits and append them after the
   other quotient limbs.
   Return the most significant limb of the quotient, this is always 0 or 1.

   Preconditions:
   0. NSIZE &gt;= DSIZE.
   1. The most significant bit of the divisor must be set.
   2. QP must either not overlap with the input operands at all, or
      QP + DSIZE &gt;= NP must hold true.  (This means that it&apos;s
      possible to put the quotient in the high part of NUM, right after the
      remainder in NUM.
   3. NSIZE &gt;= DSIZE, even if QEXTRA_LIMBS is non-zero.  */</doc>
