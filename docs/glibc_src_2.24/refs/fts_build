<dec f='glibc_src_2.24/io/fts.c' l='89' type='FTSENT * fts_build(FTS * , int )'/>
<use f='glibc_src_2.24/io/fts.c' l='398' u='c' c='fts_read'/>
<use f='glibc_src_2.24/io/fts.c' l='574' u='c' c='fts_children'/>
<use f='glibc_src_2.24/io/fts.c' l='578' u='c' c='fts_children'/>
<def f='glibc_src_2.24/io/fts.c' l='609' ll='870' type='FTSENT * fts_build(FTS * sp, int type)'/>
<doc f='glibc_src_2.24/io/fts.c' l='595'>/*
 * This is the tricky part -- do not casually change *anything* in here.  The
 * idea is to build the linked list of entries that are used by fts_children
 * and fts_read.  There are lots of special cases.
 *
 * The real slowdown in walking the tree is the stat calls.  If FTS_NOSTAT is
 * set and it&apos;s a physical walk (so that symbolic links can&apos;t be directories),
 * we can do things quickly.  First, if it&apos;s a 4.4BSD file system, the type
 * of the file is in the directory entry.  Otherwise, we assume that the number
 * of subdirectories in a node is equal to the number of links to the parent.
 * The former skips all stat calls.  The latter skips stat calls in any leaf
 * directories and for any files after the subdirectories in the directory have
 * been found, cutting the stat calls by about 2/3.
 */</doc>
