<dec f='glibc_src_2.24/include/stdlib.h' l='52' type='int __initstate_r(unsigned int __seed, char * __statebuf, size_t __statelen, struct random_data * __buf)'/>
<use f='glibc_src_2.24/stdlib/random.c' l='239' u='c' c='__initstate'/>
<def f='glibc_src_2.24/stdlib/random_r.c' l='229' ll='282' type='int __initstate_r(unsigned int seed, char * arg_state, size_t n, struct random_data * buf)'/>
<use f='glibc_src_2.24/stdlib/random_r.c' l='284' c='initstate_r'/>
<doc f='glibc_src_2.24/stdlib/random_r.c' l='218'>/* Initialize the state information in the given array of N bytes for
   future random number generation.  Based on the number of bytes we
   are given, and the break values for the different R.N.G.&apos;s, we choose
   the best (largest) one we can and set things up for it.  srandom is
   then called to initialize the state information.  Note that on return
   from srandom, we set state[-1] to be the type multiplexed with the current
   value of the rear pointer; this is so successive calls to initstate won&apos;t
   lose this information and will be able to restart with setstate.
   Note: The first thing we do is save the current state, if any, just like
   setstate so that it doesn&apos;t matter when initstate is called.
   Returns 0 on success, non-zero on failure.  */</doc>
<use f='glibc_src_2.24/string/strfry.c' l='33' u='c' c='strfry'/>
