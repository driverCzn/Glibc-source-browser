<dec f='glibc_src_2.24/nptl_db/thread_db.h' l='408' type='td_err_e td_thr_tlsbase(const td_thrhandle_t * __th, unsigned long __modid, psaddr_t * __base)'/>
<doc f='glibc_src_2.24/nptl_db/thread_db.h' l='407'>/* Get address of the given module&apos;s TLS storage area for the given thread.  */</doc>
<use f='glibc_src_2.24/nptl_db/td_thr_tls_get_addr.c' l='37' u='c' c='td_thr_tls_get_addr'/>
<def f='glibc_src_2.24/nptl_db/td_thr_tlsbase.c' l='125' ll='243' type='td_err_e td_thr_tlsbase(const td_thrhandle_t * th, unsigned long modid, psaddr_t * base)'/>
<doc f='glibc_src_2.24/nptl_db/td_thr_tlsbase.c' l='112'>/* Return in *BASE the base address of the TLS block for MODID within
   TH.

   It should return success and yield the correct pointer in any
   circumstance where the TLS block for the module and thread
   requested has already been initialized.

   It should fail with TD_TLSDEFER only when the thread could not
   possibly have observed any values in that TLS block.  That way, the
   debugger can fall back to showing initial values from the PT_TLS
   segment (and refusing attempts to mutate) for the TD_TLSDEFER case,
   and never fail to make the values the program will actually see
   available to the user of the debugger.  */</doc>
