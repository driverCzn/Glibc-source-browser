<dec f='glibc_src_2.24/sysdeps/generic/math_private.h' l='361' type='double __mpsin(double __x, double __dx, _Bool __range_reduce)'/>
<dec f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='130' type='double __mpsin(double x, double dx, _Bool reduce_range)'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='693' u='c' c='slow'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='693' u='c' c='slow'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='718' u='c' c='slow1'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='718' u='c' c='slow1'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='757' u='c' c='slow2'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='757' u='c' c='slow2'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='820' u='c' c='sloww'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='854' u='c' c='sloww1'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='888' u='c' c='sloww2'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='919' u='c' c='bsloww'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='954' u='c' c='bsloww1'/>
<use f='glibc_src_2.24/sysdeps/ieee754/dbl-64/s_sin.c' l='989' u='c' c='bsloww2'/>
<def f='glibc_src_2.24/sysdeps/ieee754/dbl-64/sincos32.c' l='195' ll='249' type='double __mpsin(double x, double dx, _Bool reduce_range)'/>
<doc f='glibc_src_2.24/sysdeps/ieee754/dbl-64/sincos32.c' l='192'>/* Compute sin() of double-length number (X + DX) as Multi Precision number and
   return result as double.  If REDUCE_RANGE is true, X is assumed to be the
   original input and DX is ignored.  */</doc>
