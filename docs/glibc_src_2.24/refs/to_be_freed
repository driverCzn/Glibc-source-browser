<def f='glibc_src_2.24/support/resolv_test.c' l='49' ll='53'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='51'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='74'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='89' c='response_push_pointer_to_free'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='90' c='response_push_pointer_to_free'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='413' c='response_builder_free'/>
<use f='glibc_src_2.24/support/resolv_test.c' l='416' c='response_builder_free'/>
<size>16</size>
<doc f='glibc_src_2.24/support/resolv_test.c' l='46'>/* List of pointers to be freed.  The hash table implementation
   (struct hsearch_data) does not provide a way to deallocate all
   objects, so this approach is used to avoid memory leaks.  */</doc>
