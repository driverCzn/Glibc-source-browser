<dec f='glibc_src_2.24/include/arpa/inet.h' l='10' type='int __inet_pton(int , const char *restrict , void *restrict )'/>
<dec f='glibc_src_2.24/include/arpa/inet.h' l='11' type='int __inet_pton(int , const char *restrict , void *restrict )'/>
<use f='glibc_src_2.24/include/arpa/inet.h' l='11' c='__inet_pton'/>
<def f='glibc_src_2.24/resolv/inet_pton.c' l='47' ll='60' type='int __inet_pton(int af, const char * src, void * dst)'/>
<use f='glibc_src_2.24/resolv/inet_pton.c' l='61' c='__EI___inet_pton'/>
<use f='glibc_src_2.24/resolv/inet_pton.c' l='61' c='__EI___inet_pton'/>
<use f='glibc_src_2.24/resolv/inet_pton.c' l='62' c='__GI_inet_pton'/>
<doc f='glibc_src_2.24/resolv/inet_pton.c' l='36'>/* int
 * inet_pton(af, src, dst)
 *	convert from presentation format (which usually means ASCII printable)
 *	to network format (which is usually some kind of binary format).
 * return:
 *	1 if the address was valid for the specified address family
 *	0 if the address wasn&apos;t valid (`dst&apos; is untouched in this case)
 *	-1 if some other error occurred (`dst&apos; is untouched in this case, too)
 * author:
 *	Paul Vixie, 1996.
 */</doc>
<use f='glibc_src_2.24/resolv/res_init.c' l='276' u='c' c='__res_vinit'/>
