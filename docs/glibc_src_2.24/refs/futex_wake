<dec f='glibc_src_2.24/sysdeps/nptl/futex-internal.h' l='193' type='void futex_wake(unsigned int * futex_word, int processes_to_wake, int private)'/>
<def f='glibc_src_2.24/sysdeps/unix/sysv/linux/futex-internal.h' l='228' ll='249' type='void futex_wake(unsigned int * futex_word, int processes_to_wake, int private)'/>
<use f='glibc_src_2.24/nptl/nptl-init.c' l='272' u='c' c='sighandler_setxid'/>
<use f='glibc_src_2.24/nptl/nptl-init.c' l='275' u='c' c='sighandler_setxid'/>
<doc f='glibc_src_2.24/sysdeps/unix/sysv/linux/futex-internal.h' l='227'>/* See sysdeps/nptl/futex-internal.h for details.  */</doc>
<doc f='glibc_src_2.24/sysdeps/nptl/futex-internal.h' l='174'>/* Atomically wrt other futex operations on the same futex, this unblocks the
   specified number of processes, or all processes blocked on this futex if
   there are fewer than the specified number.  Semantically, this is
   equivalent to:
     l = &lt;get lock associated with futex&gt; (FUTEX_WORD);
     lock (l);
     for (res = 0; PROCESSES_TO_WAKE &gt; 0; PROCESSES_TO_WAKE--, res++) {
       if (&lt;no process blocked on futex&gt;) break;
       wf = &lt;get wait_flag of a process blocked on futex&gt; (FUTEX_WORD);
       // No happens-before guarantee with woken futex_wait (see above)
       atomic_store_relaxed (wf, 0);
     }
     return res;

   Note that we need to support futex_wake calls to past futexes whose memory
   has potentially been reused due to POSIX&apos; requirements on synchronization
   object destruction (see above); therefore, we must not report or abort
   on most errors.  */</doc>
<use f='glibc_src_2.24/nptl/pthread_barrier_wait.c' l='167' u='c' c='__pthread_barrier_wait'/>
<use f='glibc_src_2.24/nptl/pthread_barrier_wait.c' l='216' u='c' c='__pthread_barrier_wait'/>
<use f='glibc_src_2.24/nptl/allocatestack.c' l='1006' u='c' c='setxid_mark_thread'/>
<use f='glibc_src_2.24/nptl/allocatestack.c' l='1033' u='c' c='setxid_unmark_thread'/>
<use f='glibc_src_2.24/nptl/pthread_create.c' l='388' u='c' c='start_thread'/>
<use f='glibc_src_2.24/nptl/pthread_create.c' l='838' u='c' c='__pthread_create_2_1'/>
<use f='glibc_src_2.24/nptl/pthread_once.c' l='38' u='c' c='clear_once_control'/>
<use f='glibc_src_2.24/nptl/pthread_once.c' l='127' u='c' c='__pthread_once_slow'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_rdlock.c' l='110' u='c' c='__pthread_rwlock_rdlock_slow'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_rdlock.c' l='172' u='c' c='__pthread_rwlock_rdlock'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_timedrdlock.c' l='133' u='c' c='pthread_rwlock_timedrdlock'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_timedwrlock.c' l='133' u='c' c='pthread_rwlock_timedwrlock'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_tryrdlock.c' l='69' u='c' c='__pthread_rwlock_tryrdlock'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_unlock.c' l='58' u='c' c='__pthread_rwlock_unlock'/>
<use f='glibc_src_2.24/nptl/pthread_rwlock_unlock.c' l='65' u='c' c='__pthread_rwlock_unlock'/>
<use f='glibc_src_2.24/nptl/sem_post.c' l='57' u='c' c='__new_sem_post'/>
<use f='glibc_src_2.24/sysdeps/nptl/fork.c' l='237' u='c' c='__libc_fork'/>
<use f='glibc_src_2.24/resolv/gai_notify.c' l='111' macro='1' u='c' c='__gai_notify'/>
<use f='glibc_src_2.24/sysdeps/pthread/aio_notify.c' l='152' macro='1' u='c' c='__aio_notify'/>
