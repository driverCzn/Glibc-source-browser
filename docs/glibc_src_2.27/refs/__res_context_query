<dec f='glibc_src_2.27/resolv/resolv-internal.h' l='70' type='int __res_context_query(struct resolv_context * , const char * , int , int , unsigned char * , int , unsigned char ** , unsigned char ** , int * , int * , int * )'/>
<doc f='glibc_src_2.27/resolv/resolv-internal.h' l='69'>/* Main resolver query function for use within glibc.  */</doc>
<use f='glibc_src_2.27/resolv/compat-gethnamaddr.c' l='669' u='c' c='res_gethostbyaddr_context'/>
<use f='glibc_src_2.27/resolv/nss_dns/dns-canon.c' l='72' u='c' c='_nss_dns_getcanonname_r'/>
<use f='glibc_src_2.27/resolv/nss_dns/dns-host.c' l='516' u='c' c='_nss_dns_gethostbyaddr2_r'/>
<use f='glibc_src_2.27/resolv/nss_dns/dns-network.c' l='214' u='c' c='_nss_dns_getnetbyaddr_r'/>
<def f='glibc_src_2.27/resolv/res_query.c' l='107' ll='278' type='int __res_context_query(struct resolv_context * ctx, const char * name, int class, int type, unsigned char * answer, int anslen, unsigned char ** answerp, unsigned char ** answerp2, int * nanswerp2, int * resplen2, int * answerp2_malloced)'/>
<use f='glibc_src_2.27/resolv/res_query.c' l='292' u='c' c='context_query_common'/>
<use f='glibc_src_2.27/resolv/res_query.c' l='351' u='c' c='__res_context_search'/>
<use f='glibc_src_2.27/resolv/res_query.c' l='593' u='c' c='__res_context_querydomain'/>
<doc f='glibc_src_2.27/resolv/res_query.c' l='99'>/* Formulate a normal query, send, and await answer.  Returned answer
   is placed in supplied buffer ANSWER.  Perform preliminary check of
   answer, returning success only if no error is indicated and the
   answer count is nonzero.  Return the size of the response on
   success, -1 on error.  Error number is left in h_errno.

   Caller must parse answer and determine whether it answers the
   question.  */</doc>
