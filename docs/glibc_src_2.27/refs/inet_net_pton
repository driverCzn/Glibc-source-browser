<dec f='glibc_src_2.27/inet/arpa/inet.h' l='88' type='int inet_net_pton(int __af, const char * __cp, void * __buf, size_t __len)'/>
<doc f='glibc_src_2.27/inet/arpa/inet.h' l='85'>/* Convert network number for interface type AF from presentation in
   buffer starting at CP to network format and store result int
   buffer starting at BUF of size LEN.  */</doc>
<def f='glibc_src_2.27/resolv/inet_net_pton.c' l='52' ll='62' type='int inet_net_pton(int af, const char * src, void * dst, size_t size)'/>
<doc f='glibc_src_2.27/resolv/inet_net_pton.c' l='39'>/*
 * static int
 * inet_net_pton(af, src, dst, size)
 *	convert network number from presentation to network format.
 *	accepts hex octets, hex strings, decimal octets, and /CIDR.
 *	&quot;size&quot; is in bytes and describes &quot;dst&quot;.
 * return:
 *	number of bits, either imputed classfully or specified with /CIDR,
 *	or -1 if some failure occurred (check errno).  ENOENT means it was
 *	not a valid network specification.
 * author:
 *	Paul Vixie (ISC), June 1996
 */</doc>
