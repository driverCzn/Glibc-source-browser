<dec f='glibc_src_2.31/posix/regcomp.c' l='68' type='bin_tree_t * parse_branch(re_string_t * regexp, regex_t * preg, re_token_t * token, reg_syntax_t syntax, Idx nest, reg_errcode_t * err)'/>
<use f='glibc_src_2.31/posix/regcomp.c' l='2159' u='c' c='parse_reg_exp'/>
<use f='glibc_src_2.31/posix/regcomp.c' l='2171' u='c' c='parse_reg_exp'/>
<def f='glibc_src_2.31/posix/regcomp.c' l='2201' ll='2238' type='bin_tree_t * parse_branch(re_string_t * regexp, regex_t * preg, re_token_t * token, reg_syntax_t syntax, Idx nest, reg_errcode_t * err)'/>
<doc f='glibc_src_2.31/posix/regcomp.c' l='2192'>/* This function build the following tree, from regular expression
   &lt;exp1&gt;&lt;exp2&gt;:
	CAT
	/ \
       /   \
   &lt;exp1&gt; &lt;exp2&gt;

   CAT means concatenation.  */</doc>
