<dec f='glibc_src_2.31/include/stdlib.h' l='40' type='void __srandom(unsigned int __seed)'/>
<def f='glibc_src_2.31/stdlib/random.c' l='207' ll='213' type='void __srandom(unsigned int x)'/>
<use f='glibc_src_2.31/stdlib/random.c' l='215' c='srandom'/>
<use f='glibc_src_2.31/stdlib/random.c' l='216' c='srand'/>
<doc f='glibc_src_2.31/stdlib/random.c' l='199'>/* Initialize the random number generator based on the given seed.  If the
   type is the trivial no-state-information type, just remember the seed.
   Otherwise, initializes state[] based on the given &quot;seed&quot; via a linear
   congruential generator.  Then, the pointers are set to known locations
   that are exactly rand_sep places apart.  Lastly, it cycles the state
   information a given number of times to get rid of any initial dependencies
   introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]
   for default usage relies on values produced by this routine.  */</doc>
