<def f='glibc_src_2.31/string/str-two-way.h' l='389' ll='521' type='char * two_way_long_needle(const unsigned char * haystack, size_t haystack_len, const unsigned char * needle, size_t needle_len)'/>
<use f='glibc_src_2.31/string/strstr.c' l='107' u='c' c='__strstr_sse2'/>
<doc f='glibc_src_2.31/string/str-two-way.h' l='374'>/* Return the first location of non-empty NEEDLE within HAYSTACK, or
   NULL.  HAYSTACK_LEN is the minimum known length of HAYSTACK.  This
   method is optimized for LONG_NEEDLE_THRESHOLD &lt;= NEEDLE_LEN.
   Performance is guaranteed to be linear, with an initialization cost
   of 3 * NEEDLE_LEN + (1 &lt;&lt; CHAR_BIT) operations.

   If AVAILABLE does not modify HAYSTACK_LEN (as in memmem), then at
   most 2 * HAYSTACK_LEN - NEEDLE_LEN comparisons occur in searching,
   and sublinear performance O(HAYSTACK_LEN / NEEDLE_LEN) is possible.
   If AVAILABLE modifies HAYSTACK_LEN (as in strstr), then at most 3 *
   HAYSTACK_LEN - NEEDLE_LEN comparisons occur in searching, and
   sublinear performance is not possible.

   Since this function is large and complex, block inlining to avoid
   slowing down the common case of small needles.  */</doc>
<use f='glibc_src_2.31/string/memmem.c' l='80' u='c' c='__memmem'/>
<use f='glibc_src_2.31/string/strcasestr.c' l='87' u='c' c='__strcasestr'/>
