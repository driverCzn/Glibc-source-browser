<dec f='glibc_src_2.31/include/shlib-compat.h' l='90'/>
<doc f='glibc_src_2.31/include/shlib-compat.h' l='67'>/* This is similar to compat_symbol, but allows versioning the same symbol
   to multiple version without having multiple symbol definitions.  For
   instance:

   #if (SHLIB_COMPAT (libpthread, GLIBC_2_1_2, GLIBC_2_2))
   compat_symbol_unique (libc, old_foo, GLIBC_2_1_2)
   #endif

   #if (SHLIB_COMPAT (libpthread, GLIBC_2_2_6, GLIBC_2_3))
   compat_symbol_unique (libc, old_foo, GLIBC_2_2_6)
   #endif

   Internally it creates a unique strong alias to the input symbol and
   creates one compat_symbol on the alias.  Using the above example,
   it is similar to:

   #if (SHLIB_COMPAT (libpthread, GLIBC_2_1_2, GLIBC_2_2))
   strong_alias (old_foo, old_foo__COUNTER__)
   compat_symbol (libc, old_foo__COUNTER__, foo, GLIBC_2_2)
   #endif.

   With __COUNTER__ being a monotonic number generated by the compiler.  */</doc>
