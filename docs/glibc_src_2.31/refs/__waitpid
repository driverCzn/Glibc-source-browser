<dec f='glibc_src_2.31/include/sys/wait.h' l='6' type='__pid_t __waitpid(__pid_t __pid, int * __stat_loc, int __options)'/>
<dec f='glibc_src_2.31/include/sys/wait.h' l='8' type='__pid_t __waitpid(__pid_t , int * , int )'/>
<use f='glibc_src_2.31/include/sys/wait.h' l='8' c='__waitpid'/>
<doc f='glibc_src_2.31/include/sys/wait.h' l='5'>/* Now define the internal interfaces.  */</doc>
<use f='glibc_src_2.31/libio/iopopen.c' l='287' u='c' c='_IO_new_proc_close'/>
<use f='glibc_src_2.31/sysdeps/unix/sysv/linux/spawni.c' l='404' u='c' c='__spawnix'/>
<use f='glibc_src_2.31/posix/wait.c' l='25' u='c' c='__wait'/>
<def f='glibc_src_2.31/posix/waitpid.c' l='35' ll='39' type='__pid_t __waitpid(pid_t pid, int * stat_loc, int options)'/>
<use f='glibc_src_2.31/posix/waitpid.c' l='41' c='waitpid'/>
<doc f='glibc_src_2.31/posix/waitpid.c' l='23'>/* Wait for a child matching PID to die.
   If PID is greater than 0, match any process whose process ID is PID.
   If PID is (pid_t) -1, match any process.
   If PID is (pid_t) 0, match any process with the
   same process group as the current process.
   If PID is less than -1, match any process whose
   process group is the absolute value of PID.
   If the WNOHANG bit is set in OPTIONS, and that child
   is not already dead, return (pid_t) 0.  If successful,
   return PID and store the dead child&apos;s status in STAT_LOC.
   Return (pid_t) -1 for errors.  If the WUNTRACED bit is set in OPTIONS,
   return status for stopped children; otherwise don&apos;t.  */</doc>
<use f='glibc_src_2.31/posix/wordexp.c' l='912' u='c' c='exec_comm'/>
<use f='glibc_src_2.31/posix/wordexp.c' l='929' u='c' c='exec_comm'/>
<use f='glibc_src_2.31/posix/wordexp.c' l='964' u='c' c='exec_comm'/>
<use f='glibc_src_2.31/posix/wordexp.c' l='1098' u='c' c='exec_comm'/>
<use f='glibc_src_2.31/sysdeps/posix/system.c' l='87' u='c' c='cancel_handler'/>
<use f='glibc_src_2.31/sysdeps/posix/system.c' l='171' u='c' c='do_system'/>
