<def f='glibc_src_2.31/sysdeps/nptl/futex-internal.h' l='408' ll='434' type='int futex_lock_pi(unsigned int * futex_word, const struct timespec * abstime, int private)'/>
<use f='glibc_src_2.31/nptl/pthread_mutex_lock.c' l='419' u='c' c='__pthread_mutex_cond_lock_full'/>
<doc f='glibc_src_2.31/sysdeps/nptl/futex-internal.h' l='384'>/* The operation checks the value of the futex, if the value is 0, then
   it is atomically set to the caller&apos;s thread ID.  If the futex value is
   nonzero, it is atomically sets the FUTEX_WAITERS bit, which signals wrt
   other futex owner that it cannot unlock the futex in user space by
   atomically by setting its value to 0.

   If more than one wait operations is issued, the enqueueing of the waiters
   are done in descending priority order.

   The ABSTIME arguments provides an absolute timeout (measured against the
   CLOCK_REALTIME clock).  If TIMEOUT is NULL, the operation will block
   indefinitely.

   Returns:

     - 0 if woken by a PI unlock operation or spuriously.
     - EAGAIN if the futex owner thread ID is about to exit, but has not yet
       handled the state cleanup.
     - EDEADLK if the futex is already locked by the caller.
     - ESRCH if the thread ID int he futex does not exist.
     - EINVAL is the state is corrupted or if there is a waiter on the
       futex.
     - ETIMEDOUT if the ABSTIME expires.
*/</doc>
<use f='glibc_src_2.31/nptl/pthread_mutex_timedlock.c' l='381' u='c' c='__pthread_mutex_clocklock_common'/>
