<def f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_sincosf.h' l='74' ll='95' type='double reduce_large(uint32_t xi, int * np)'/>
<use f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_tanf.c' l='43' u='c' c='rem_pio2f'/>
<doc f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_sincosf.h' l='67'>/* Reduce the range of XI to a multiple of PI/2 using fast integer arithmetic.
   XI is a reinterpreted float and must be &gt;= 2.0f (the sign bit is ignored).
   Return the modulo between -PI/4 and PI/4 and store the quadrant in NP.
   Reduction uses a table of 4/PI with 192 bits of precision.  A 32x96-&gt;128 bit
   multiply computes the exact 2.62-bit fixed-point modulo.  Since the result
   can have at most 29 leading zeros after the binary point, the double
   precision result is accurate to 33 bits.  */</doc>
<use f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_cosf.c' l='71' u='c' c='__cosf_fma'/>
<use f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_sincosf.c' l='78' u='c' c='__sincosf_fma'/>
<use f='glibc_src_2.31/sysdeps/ieee754/flt-32/s_sinf.c' l='76' u='c' c='__sinf_fma'/>
