<use f='glibc_src_2.28/sunrpc/pm_getmaps.c' l='75' c='__GI_pmap_getmaps'/>
<def f='glibc_src_2.28/sunrpc/pmap_prot2.c' l='79' ll='111' type='bool_t xdr_pmaplist(XDR * xdrs, struct pmaplist ** rp)'/>
<use f='glibc_src_2.28/sunrpc/pmap_prot2.c' l='112' c='__EI_xdr_pmaplist'/>
<doc f='glibc_src_2.28/sunrpc/pmap_prot2.c' l='41'>/*
 * What is going on with linked lists? (!)
 * First recall the link list declaration from pmap_prot.h:
 *
 * struct pmaplist {
 *      struct pmap pml_map;
 *      struct pmaplist *pml_map;
 * };
 *
 * Compare that declaration with a corresponding xdr declaration that
 * is (a) pointer-less, and (b) recursive:
 *
 * typedef union switch (bool_t) {
 *
 *      case TRUE: struct {
 *              struct pmap;
 *              pmaplist_t foo;
 *      };
 *
 *      case FALSE: struct {};
 * } pmaplist_t;
 *
 * Notice that the xdr declaration has no nxt pointer while
 * the C declaration has no bool_t variable.  The bool_t can be
 * interpreted as ``more data follows me&apos;&apos;; if FALSE then nothing
 * follows this bool_t; if TRUE then the bool_t is followed by
 * an actual struct pmap, and then (recursively) by the
 * xdr union, pamplist_t.
 *
 * This could be implemented via the xdr_union primitive, though this
 * would cause a one recursive call per element in the list.  Rather than do
 * that we can ``unwind&apos;&apos; the recursion
 * into a while loop and do the union arms in-place.
 *
 * The head of the list is what the C programmer wishes to past around
 * the net, yet is the data that the pointer points to which is interesting;
 * this sounds like a job for xdr_reference!
 */</doc>
