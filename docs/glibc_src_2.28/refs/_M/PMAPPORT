<dec f='glibc_src_2.28/sunrpc/rpc/pmap_prot.h' l='75'/>
<doc f='glibc_src_2.28/sunrpc/rpc/pmap_prot.h' l='44'>/* The following procedures are supported by the protocol:
 *
 * PMAPPROC_NULL() returns ()
 *	takes nothing, returns nothing
 *
 * PMAPPROC_SET(struct pmap) returns (bool_t)
 *	TRUE is success, FALSE is failure.  Registers the tuple
 *	[prog, vers, prot, port].
 *
 * PMAPPROC_UNSET(struct pmap) returns (bool_t)
 *	TRUE is success, FALSE is failure.  Un-registers pair
 *	[prog, vers].  prot and port are ignored.
 *
 * PMAPPROC_GETPORT(struct pmap) returns (long unsigned).
 *	0 is failure.  Otherwise returns the port number where the pair
 *	[prog, vers] is registered.  It may lie!
 *
 * PMAPPROC_DUMP() RETURNS (struct pmaplist *)
 *
 * PMAPPROC_CALLIT(unsigned, unsigned, unsigned, string&lt;&gt;)
 *	RETURNS (port, string&lt;&gt;);
 * usage: encapsulatedresults = PMAPPROC_CALLIT(prog, vers, proc, encapsulatedargs);
 *	Calls the procedure on the local machine.  If it is not registered,
 *	this procedure is quite; ie it does not return error information!!!
 *	This procedure only is supported on rpc/udp and calls via
 *	rpc/udp.  This routine only passes null authentication parameters.
 *	This file has no interface to xdr routines for PMAPPROC_CALLIT.
 *
 * The service supports remote procedure calls on udp/ip or tcp/ip socket 111.
 */</doc>
<use f='glibc_src_2.28/sunrpc/get_myaddr.c' l='80' u='c'/>
<use f='glibc_src_2.28/sunrpc/pm_getmaps.c' l='64' u='c'/>
<use f='glibc_src_2.28/sunrpc/pm_getport.c' l='97' u='c'/>
<use f='glibc_src_2.28/sunrpc/pmap_clnt.c' l='79' u='c'/>
<use f='glibc_src_2.28/sunrpc/pmap_rmt.c' l='78' u='c'/>
<use f='glibc_src_2.28/sunrpc/pmap_rmt.c' l='261' u='c'/>
