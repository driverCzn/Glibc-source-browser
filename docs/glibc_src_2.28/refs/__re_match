<dec f='glibc_src_2.28/include/regex.h' l='23' type='int __re_match(struct re_pattern_buffer * buffer, const char * string, int length, int start, struct re_registers * regs)'/>
<def f='glibc_src_2.28/posix/regexec.c' l='276' macro='1' type='regoff_t __re_match(struct re_pattern_buffer * bufp, const char * string, Idx length, Idx start, struct re_registers * regs)'/>
<use f='glibc_src_2.28/posix/regexec.c' l='282' c='re_match'/>
<doc f='glibc_src_2.28/posix/regexec.c' l='248'>/* re_match, re_search, re_match_2, re_search_2

   The former two functions operate on STRING with length LENGTH,
   while the later two operate on concatenation of STRING1 and STRING2
   with lengths LENGTH1 and LENGTH2, respectively.

   re_match() matches the compiled pattern in BUFP against the string,
   starting at index START.

   re_search() first tries matching at index START, then it tries to match
   starting from index START + 1, and so on.  The last start position tried
   is START + RANGE.  (Thus RANGE = 0 forces re_search to operate the same
   way as re_match().)

   The parameter STOP of re_{match,search}_2 specifies that no match exceeding
   the first STOP characters of the concatenation of the strings should be
   concerned.

   If REGS is not NULL, and BUFP-&gt;no_sub is not set, the offsets of the match
   and all groups is stored in REGS.  (For the &quot;_2&quot; variants, the offsets are
   computed relative to the concatenation, not relative to the individual
   strings.)

   On success, re_match* functions return the length of the match, re_search*
   return the position of the start of the match.  Return value -1 means no
   match was found and -2 indicates an internal error.  */</doc>
