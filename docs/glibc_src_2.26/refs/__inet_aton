<dec f='glibc_src_2.26/include/arpa/inet.h' l='4' type='int __inet_aton(const char * __cp, struct in_addr * __inp)'/>
<dec f='glibc_src_2.26/include/arpa/inet.h' l='5' type='int __inet_aton(const char * , struct in_addr * )'/>
<use f='glibc_src_2.26/include/arpa/inet.h' l='5' c='__inet_aton'/>
<use f='glibc_src_2.26/nss/digits_dots.c' l='163' u='c' c='__nss_hostname_digits_dots_context'/>
<use f='glibc_src_2.26/resolv/inet_addr.c' l='89' u='c' c='__inet_addr'/>
<def f='glibc_src_2.26/resolv/inet_addr.c' l='102' ll='180' type='int __inet_aton(const char * cp, struct in_addr * addr)'/>
<use f='glibc_src_2.26/resolv/inet_addr.c' l='181' c='__GI_inet_aton'/>
<use f='glibc_src_2.26/resolv/inet_addr.c' l='182' c='__EI___inet_aton'/>
<use f='glibc_src_2.26/resolv/inet_addr.c' l='182' c='__EI___inet_aton'/>
<doc f='glibc_src_2.26/resolv/inet_addr.c' l='95'>/*
 * Check whether &quot;cp&quot; is a valid ascii representation
 * of an Internet address and convert to a binary address.
 * Returns 1 if the address is valid, 0 if not.
 * This replaces inet_addr, the return value from which
 * cannot distinguish between failure and a local broadcast address.
 */</doc>
<use f='glibc_src_2.26/resolv/res_init.c' l='403' u='c' c='res_vinit_1'/>
<use f='glibc_src_2.26/resolv/res_init.c' l='475' u='c' c='res_vinit_1'/>
<use f='glibc_src_2.26/resolv/res_init.c' l='487' u='c' c='res_vinit_1'/>
