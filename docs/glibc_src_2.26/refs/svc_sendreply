<dec f='glibc_src_2.26/sunrpc/rpc/svc.h' l='244' type='bool_t svc_sendreply(SVCXPRT * __xprt, xdrproc_t __xdr_results, caddr_t __xdr_location)'/>
<doc f='glibc_src_2.26/sunrpc/rpc/svc.h' l='218'>/*
 * When the service routine is called, it must first check to see if it
 * knows about the procedure;  if not, it should call svcerr_noproc
 * and return.  If so, it should deserialize its arguments via
 * SVC_GETARGS (defined above).  If the deserialization does not work,
 * svcerr_decode should be called followed by a return.  Successful
 * decoding of the arguments should be followed the execution of the
 * procedure&apos;s code and a call to svc_sendreply.
 *
 * Also, if the service refuses to execute the procedure due to too-
 * weak authentication parameters, svcerr_weakauth should be called.
 * Note: do not confuse access-control failure with weak authentication!
 *
 * NB: In pure implementations of rpc, the caller always waits for a reply
 * msg.  This message is sent when svc_sendreply is called.
 * Therefore pure service implementations should always call
 * svc_sendreply even if the function logically returns void;  use
 * xdr.h - xdr_void for the xdr routine.  HOWEVER, tcp based rpc allows
 * for the abuse of pure rpc via batched calling or pipelining.  In the
 * case of a batched call, svc_sendreply should NOT be called since
 * this would send a return message, which is what batching tries to avoid.
 * It is the service/protocol writer&apos;s responsibility to know which calls are
 * batched and which are not.  Warning: responding to batch calls may
 * deadlock the caller and server processes!
 */</doc>
<use f='glibc_src_2.26/nis/nis_callback.c' l='114' u='c' c='cb_prog_1'/>
<use f='glibc_src_2.26/nis/nis_callback.c' l='184' u='c' c='cb_prog_1'/>
