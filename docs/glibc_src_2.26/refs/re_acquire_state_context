<def f='glibc_src_2.26/posix/regex_internal.c' l='1519' ll='1550' type='re_dfastate_t * re_acquire_state_context(reg_errcode_t * err, const re_dfa_t * dfa, const re_node_set * nodes, unsigned int context)'/>
<use f='glibc_src_2.26/posix/regcomp.c' l='1038' u='c' c='create_initial_state'/>
<use f='glibc_src_2.26/posix/regcomp.c' l='1044' u='c' c='create_initial_state'/>
<use f='glibc_src_2.26/posix/regcomp.c' l='1046' u='c' c='create_initial_state'/>
<use f='glibc_src_2.26/posix/regcomp.c' l='1048' u='c' c='create_initial_state'/>
<use f='glibc_src_2.26/posix/regexec.c' l='1047' u='c' c='acquire_init_state_context'/>
<use f='glibc_src_2.26/posix/regexec.c' l='2352' u='c' c='merge_state_with_log'/>
<use f='glibc_src_2.26/posix/regexec.c' l='2550' u='c' c='transit_state_mb'/>
<use f='glibc_src_2.26/posix/regexec.c' l='2624' u='c' c='transit_state_bkref'/>
<use f='glibc_src_2.26/posix/regexec.c' l='2642' u='c' c='transit_state_bkref'/>
<use f='glibc_src_2.26/posix/regexec.c' l='2951' u='c' c='check_arrival'/>
<use f='glibc_src_2.26/posix/regexec.c' l='3002' u='c' c='check_arrival'/>
<use f='glibc_src_2.26/posix/regexec.c' l='3413' u='c' c='build_trtable'/>
<use f='glibc_src_2.26/posix/regexec.c' l='3420' u='c' c='build_trtable'/>
<use f='glibc_src_2.26/posix/regexec.c' l='3428' u='c' c='build_trtable'/>
<doc f='glibc_src_2.26/posix/regex_internal.c' l='1509'>/* Search for the state whose node_set is equivalent to NODES and
   whose context is equivalent to CONTEXT.
   Return the pointer to the state, if we found it in the DFA.
   Otherwise create the new one and return it.  In case of an error
   return NULL and set the error code in ERR.
   Note: - We assume NULL as the invalid state, then it is possible that
	   return value is NULL and ERR is REG_NOERROR.
	 - We never return non-NULL value in case of any errors, it is for
	   optimization.  */</doc>
