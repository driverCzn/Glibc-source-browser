<dec f='glibc_src_2.26/crypt/sha512.h' l='69' type='void * __sha512_finish_ctx(struct sha512_ctx * ctx, void * resbuf)'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='74' u='c' c='__sha512_crypt_r'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='74' u='c' c='__sha512_crypt_r'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='74' u='c' c='__sha512_crypt_r'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='74' u='c' c='__sha512_crypt_r'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='74' u='c' c='__sha512_crypt_r'/>
<use f='glibc_src_2.26/crypt/sha512-crypt.c' l='395' u='c' c='__sha512_crypt_r'/>
<doc f='glibc_src_2.26/crypt/sha512.h' l='64'>/* Process the remaining bytes in the buffer and put result from CTX
   in first 64 bytes following RESBUF.

   IMPORTANT: On some systems it is required that RESBUF is correctly
   aligned for a 64 bits value.  */</doc>
<def f='glibc_src_2.26/crypt/sha512.c' l='131' ll='163' type='void * __sha512_finish_ctx(struct sha512_ctx * ctx, void * resbuf)'/>
<doc f='glibc_src_2.26/crypt/sha512.c' l='126'>/* Process the remaining bytes in the internal buffer and the usual
   prolog according to the standard and write the result to RESBUF.

   IMPORTANT: On some systems it is required that RESBUF is correctly
   aligned for a 32 bits value.  */</doc>
