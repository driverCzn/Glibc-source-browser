<dec f='glibc_src_2.26/resolv/resolv-internal.h' l='64' type='int __res_context_search(struct resolv_context * , const char * , int , int , unsigned char * , int , unsigned char ** , unsigned char ** , int * , int * , int * )'/>
<doc f='glibc_src_2.26/resolv/resolv-internal.h' l='63'>/* Main resolver query function for use within glibc.  */</doc>
<use f='glibc_src_2.26/resolv/compat-gethnamaddr.c' l='570' u='c' c='res_gethostbyname2_context'/>
<use f='glibc_src_2.26/resolv/nss_dns/dns-host.c' l='217' u='c' c='gethostbyname3_context'/>
<use f='glibc_src_2.26/resolv/nss_dns/dns-host.c' l='250' u='c' c='gethostbyname3_context'/>
<use f='glibc_src_2.26/resolv/nss_dns/dns-host.c' l='350' u='c' c='_nss_dns_gethostbyname4_r'/>
<use f='glibc_src_2.26/resolv/nss_dns/dns-network.c' l='130' u='c' c='_nss_dns_getnetbyname_r'/>
<def f='glibc_src_2.26/resolv/res_query.c' l='321' ll='517' type='int __res_context_search(struct resolv_context * ctx, const char * name, int class, int type, unsigned char * answer, int anslen, unsigned char ** answerp, unsigned char ** answerp2, int * nanswerp2, int * resplen2, int * answerp2_malloced)'/>
<use f='glibc_src_2.26/resolv/res_query.c' l='518' c='__EI___res_context_search'/>
<use f='glibc_src_2.26/resolv/res_query.c' l='518' c='__EI___res_context_search'/>
<use f='glibc_src_2.26/resolv/res_query.c' l='531' u='c' c='context_search_common'/>
<doc f='glibc_src_2.26/resolv/res_query.c' l='317'>/* Formulate a normal query, send, and retrieve answer in supplied
   buffer.  Return the size of the response on success, -1 on error.
   If enabled, implement search rules until answer or unrecoverable
   failure is detected.  Error code, if any, is left in h_errno.  */</doc>
