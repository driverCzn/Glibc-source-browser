<dec f='glibc_src_2.26/sysdeps/nptl/libc-lockP.h' l='269' type='void _pthread_cleanup_push(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<doc f='glibc_src_2.26/sysdeps/nptl/libc-lockP.h' l='265'>/* Note that for I/O cleanup handling we are using the old-style
   cancel handling.  It does not have to be integrated with C++ snce
   no C++ code is called in the middle.  The old-style handling is
   faster and the support is not going away.  */</doc>
<dec f='glibc_src_2.26/nptl/pthreadP.h' l='587' type='void _pthread_cleanup_push(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<doc f='glibc_src_2.26/nptl/pthreadP.h' l='586'>/* Old cleanup interfaces, still used in libc.so.  */</doc>
<def f='glibc_src_2.26/nptl/cleanup_compat.c' l='23' ll='34' type='void _pthread_cleanup_push(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<use f='glibc_src_2.26/nptl/cleanup_compat.c' l='35' c='__pthread_cleanup_push'/>
