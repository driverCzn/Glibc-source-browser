<dec f='glibc_src_2.26/support/tty.h' l='41' type='void support_openpty(int * a_outer, int * a_inner, char ** a_name, const struct termios * termp, const struct winsize * winp)'/>
<def f='glibc_src_2.26/support/support_openpty.c' l='54' ll='109' type='void support_openpty(int * a_outer, int * a_inner, char ** a_name, const struct termios * termp, const struct winsize * winp)'/>
<doc f='glibc_src_2.26/support/tty.h' l='25'>/** Open a pseudoterminal pair.  The outer fd is written to the address
    A_OUTER and the inner fd to A_INNER.

    If A_NAME is not NULL, it will be set to point to a string naming
    the /dev/pts/NNN device corresponding to the inner fd; space for
    this string is allocated with malloc and should be freed by the
    caller when no longer needed.  (This is different from the libutil
    function &apos;openpty&apos;.)

    If TERMP is not NULL, the terminal parameters will be initialized
    according to the termios structure it points to.

    If WINP is not NULL, the terminal window size will be set
    accordingly.

    Terminates the process on failure (like xmalloc).  */</doc>
