<dec f='glibc_src_2.26/include/regex.h' l='35' type='int __regcomp(regex_t * __preg, const char * __pattern, int __cflags)'/>
<def f='glibc_src_2.26/posix/regcomp.c' l='468' macro='1' type='int __regcomp(regex_t *restrict preg, const char *restrict pattern, int cflags)'/>
<use f='glibc_src_2.26/posix/regcomp.c' l='520' c='regcomp'/>
<doc f='glibc_src_2.26/posix/regcomp.c' l='432'>/* regcomp takes a regular expression as a string and compiles it.

   PREG is a regex_t *.  We do not expect any fields to be initialized,
   since POSIX says we shouldn&apos;t.  Thus, we set

     &apos;buffer&apos; to the compiled pattern;
     &apos;used&apos; to the length of the compiled pattern;
     &apos;syntax&apos; to RE_SYNTAX_POSIX_EXTENDED if the
       REG_EXTENDED bit in CFLAGS is set; otherwise, to
       RE_SYNTAX_POSIX_BASIC;
     &apos;newline_anchor&apos; to REG_NEWLINE being set in CFLAGS;
     &apos;fastmap&apos; to an allocated space for the fastmap;
     &apos;fastmap_accurate&apos; to zero;
     &apos;re_nsub&apos; to the number of subexpressions in PATTERN.

   PATTERN is the address of the pattern string.

   CFLAGS is a series of bits which affect compilation.

     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
     use POSIX basic syntax.

     If REG_NEWLINE is set, then . and [^...] don&apos;t match newline.
     Also, regexec will try a match beginning after every newline.

     If REG_ICASE is set, then we considers upper- and lowercase
     versions of letters to be equivalent when matching.

     If REG_NOSUB is set, then when PREG is passed to regexec, that
     routine will report only success or failure, and nothing about the
     registers.

   It returns 0 if it succeeds, nonzero if it doesn&apos;t.  (See regex.h for
   the return codes and their meanings.)  */</doc>
<use f='glibc_src_2.26/stdlib/rpmatch.c' l='43' u='c' c='try'/>
