<dec f='glibc_src_2.26/libidn/stringprep.h' l='173' type='int stringprep(char * in, size_t maxlen, Stringprep_profile_flags flags, const Stringprep_profile * profile)'/>
<use f='glibc_src_2.26/libidn/idna.c' l='129' macro='1' u='c' c='idna_to_ascii_4i'/>
<use f='glibc_src_2.26/libidn/idna.c' l='131' macro='1' u='c' c='idna_to_ascii_4i'/>
<use f='glibc_src_2.26/libidn/idna.c' l='304' macro='1' u='c' c='idna_to_unicode_internal'/>
<use f='glibc_src_2.26/libidn/idna.c' l='306' macro='1' u='c' c='idna_to_unicode_internal'/>
<def f='glibc_src_2.26/libidn/stringprep.c' l='355' ll='405' type='int stringprep(char * in, size_t maxlen, Stringprep_profile_flags flags, const Stringprep_profile * profile)'/>
<use f='glibc_src_2.26/libidn/stringprep.c' l='457' u='c' c='stringprep_profile'/>
<doc f='glibc_src_2.26/libidn/stringprep.c' l='328'>/**
 * stringprep:
 * @in: input/ouput array with string to prepare.
 * @maxlen: maximum length of input/output array.
 * @flags: stringprep profile flags, or 0.
 * @profile: pointer to stringprep profile to use.
 *
 * Prepare the input zero terminated UTF-8 string according to the
 * stringprep profile, and write back the result to the input string.
 *
 * Note that you must convert strings entered in the systems locale
 * into UTF-8 before using this function, see
 * stringprep_locale_to_utf8().
 *
 * Since the stringprep operation can expand the string, @maxlen
 * indicate how large the buffer holding the string is.  This function
 * will not read or write to characters outside that size.
 *
 * The @flags are one of Stringprep_profile_flags, or 0.
 *
 * The @profile contain the instructions to perform.  Your application
 * can define new profiles, possibly re-using the generic stringprep
 * tables that always will be part of the library, or use one of the
 * currently supported profiles.
 *
 * Return value: Returns %STRINGPREP_OK iff successful, or an error code.
 **/</doc>
