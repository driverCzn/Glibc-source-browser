<dec f='glibc_src_2.26/libidn/stringprep.h' l='167' type='int stringprep_4i(uint32_t * ucs4, size_t * len, size_t maxucs4len, Stringprep_profile_flags flags, const Stringprep_profile * profile)'/>
<doc f='glibc_src_2.26/libidn/stringprep.h' l='165'>/* API */</doc>
<def f='glibc_src_2.26/libidn/stringprep.c' l='135' ll='271' type='int stringprep_4i(uint32_t * ucs4, size_t * len, size_t maxucs4len, Stringprep_profile_flags flags, const Stringprep_profile * profile)'/>
<use f='glibc_src_2.26/libidn/stringprep.c' l='280' u='c' c='stringprep_4zi_1'/>
<use f='glibc_src_2.26/libidn/stringprep.c' l='379' u='c' c='stringprep'/>
<doc f='glibc_src_2.26/libidn/stringprep.c' l='105'>/**
 * stringprep_4i:
 * @ucs4: input/output array with string to prepare.
 * @len: on input, length of input array with Unicode code points,
 *          on exit, length of output array with Unicode code points.
 * @maxucs4len: maximum length of input/output array.
 * @flags: stringprep profile flags, or 0.
 * @profile: pointer to stringprep profile to use.
 *
 * Prepare the input UCS-4 string according to the stringprep profile,
 * and write back the result to the input string.
 *
 * The input is not required to be zero terminated (@ucs4[@len] = 0).
 * The output will not be zero terminated unless @ucs4[@len] = 0.
 * Instead, see stringprep_4zi() if your input is zero terminated or
 * if you want the output to be.
 *
 * Since the stringprep operation can expand the string, @maxucs4len
 * indicate how large the buffer holding the string is.  This function
 * will not read or write to code points outside that size.
 *
 * The @flags are one of Stringprep_profile_flags, or 0.
 *
 * The @profile contain the instructions to perform.  Your application
 * can define new profiles, possibly re-using the generic stringprep
 * tables that always will be part of the library, or use one of the
 * currently supported profiles.
 *
 * Return value: Returns %STRINGPREP_OK iff successful, or an error code.
 **/</doc>
