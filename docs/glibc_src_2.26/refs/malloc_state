<use f='glibc_src_2.26/include/malloc.h' l='13'/>
<def f='glibc_src_2.26/malloc/malloc.c' l='1682' ll='1724'/>
<use f='glibc_src_2.26/malloc/malloc.c' l='1710'/>
<use f='glibc_src_2.26/malloc/malloc.c' l='1714'/>
<use f='glibc_src_2.26/malloc/malloc.c' l='1769'/>
<size>2200</size>
<doc f='glibc_src_2.26/malloc/malloc.c' l='1671'>/*
   have_fastchunks indicates that there are probably some fastbin chunks.
   It is set true on entering a chunk into any fastbin, and cleared early in
   malloc_consolidate.  The value is approximate since it may be set when there
   are no fastbin chunks, or it may be clear even if there are fastbin chunks
   available.  Given it&apos;s sole purpose is to reduce number of redundant calls to
   malloc_consolidate, it does not affect correctness.  As a result we can safely
   use relaxed atomic accesses.
 */</doc>
<mbr r='malloc_state::mutex' o='0' t='__libc_lock_t'/>
<mbr r='malloc_state::flags' o='32' t='int'/>
<mbr r='malloc_state::have_fastchunks' o='64' t='int'/>
<mbr r='malloc_state::fastbinsY' o='128' t='mfastbinptr [10]'/>
<mbr r='malloc_state::top' o='768' t='mchunkptr'/>
<mbr r='malloc_state::last_remainder' o='832' t='mchunkptr'/>
<mbr r='malloc_state::bins' o='896' t='mchunkptr [254]'/>
<mbr r='malloc_state::binmap' o='17152' t='unsigned int [4]'/>
<mbr r='malloc_state::next' o='17280' t='struct malloc_state *'/>
<mbr r='malloc_state::next_free' o='17344' t='struct malloc_state *'/>
<mbr r='malloc_state::attached_threads' o='17408' t='size_t'/>
<mbr r='malloc_state::system_mem' o='17472' t='size_t'/>
<mbr r='malloc_state::max_system_mem' o='17536' t='size_t'/>
