<dec f='glibc_src_2.26/sysdeps/nptl/libc-lock.h' l='150' type='void _pthread_cleanup_push_defer(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<dec f='glibc_src_2.26/sysdeps/nptl/libc-lockP.h' l='273' type='void _pthread_cleanup_push_defer(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<doc f='glibc_src_2.26/sysdeps/nptl/libc-lock.h' l='146'>/* Note that for I/O cleanup handling we are using the old-style
   cancel handling.  It does not have to be integrated with C++ since
   no C++ code is called in the middle.  The old-style handling is
   faster and the support is not going away.  */</doc>
<dec f='glibc_src_2.26/nptl/pthreadP.h' l='591' type='void _pthread_cleanup_push_defer(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<use f='glibc_src_2.26/libio/genops.c' l='64' macro='1' u='r' c='_IO_un_link'/>
<use f='glibc_src_2.26/libio/genops.c' l='64' macro='1' u='c' c='_IO_un_link'/>
<use f='glibc_src_2.26/libio/genops.c' l='102' macro='1' u='r' c='_IO_link_in'/>
<use f='glibc_src_2.26/libio/genops.c' l='102' macro='1' u='c' c='_IO_link_in'/>
<use f='glibc_src_2.26/libio/genops.c' l='800' macro='1' u='r' c='_IO_flush_all_lockp'/>
<use f='glibc_src_2.26/libio/genops.c' l='800' macro='1' u='c' c='_IO_flush_all_lockp'/>
<use f='glibc_src_2.26/libio/genops.c' l='862' macro='1' u='r' c='_IO_flush_all_linebuffered'/>
<use f='glibc_src_2.26/libio/genops.c' l='862' macro='1' u='c' c='_IO_flush_all_linebuffered'/>
<def f='glibc_src_2.26/nptl/cleanup_defer_compat.c' l='22' ll='55' type='void _pthread_cleanup_push_defer(struct _pthread_cleanup_buffer * buffer, void (*)(void *) routine, void * arg)'/>
<use f='glibc_src_2.26/nptl/cleanup_defer_compat.c' l='56' c='__pthread_cleanup_push_defer'/>
<use f='glibc_src_2.26/sysdeps/posix/system.c' l='112' macro='1' u='r' c='do_system'/>
<use f='glibc_src_2.26/sysdeps/posix/system.c' l='112' macro='1' u='c' c='do_system'/>
