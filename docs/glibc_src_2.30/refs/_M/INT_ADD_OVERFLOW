<dec f='glibc_src_2.30/include/intprops.h' l='319'/>
<doc f='glibc_src_2.30/include/intprops.h' l='280'>/* Check for integer overflow, and report low order bits of answer.

   The INT_&lt;op&gt;_OVERFLOW macros return 1 if the corresponding C operators
   might not yield numerically correct answers due to arithmetic overflow.
   The INT_&lt;op&gt;_WRAPV macros also store the low-order bits of the answer.
   These macros work correctly on all known practical hosts, and do not rely
   on undefined behavior due to signed arithmetic overflow.

   Example usage, assuming A and B are long int:

     if (INT_MULTIPLY_OVERFLOW (a, b))
       printf (&quot;result would overflow\n&quot;);
     else
       printf (&quot;result is %ld (no overflow)\n&quot;, a * b);

   Example usage with WRAPV flavor:

     long int result;
     bool overflow = INT_MULTIPLY_WRAPV (a, b, &amp;result);
     printf (&quot;result is %ld (%s)\n&quot;, result,
             overflow ? &quot;after overflow&quot; : &quot;no overflow&quot;);

   Restrictions on these macros:

   These macros do not check for all possible numerical problems or
   undefined or unspecified behavior: they do not check for division
   by zero, for bad shift counts, or for shifting negative numbers.

   These macros may evaluate their arguments zero or multiple times, so the
   arguments should not have side effects.

   The WRAPV macros are not constant expressions.  They support only
   +, binary -, and *.  The result type must be signed.

   These macros are tuned for their last argument being a constant.

   Return 1 if the integer expressions A * B, A - B, -A, A * B, A / B,
   A % B, and A &lt;&lt; B would overflow, respectively.  */</doc>
<use f='glibc_src_2.30/support/timespec-add.c' l='53' u='c'/>
