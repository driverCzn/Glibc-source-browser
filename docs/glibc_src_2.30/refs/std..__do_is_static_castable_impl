<def f='include/c++/7/type_traits' l='936' ll='944'/>
<ovr f='include/c++/7/type_traits' l='947' c='std::__is_static_castable_impl'/>
<use f='include/c++/7/type_traits' l='948'/>
<size>1</size>
<doc f='include/c++/7/type_traits' l='925'>// Implementation of is_constructible.

  // The hardest part of this trait is the binary direct-initialization
  // case, because we hit into a functional cast of the form T(arg).
  // This implementation uses different strategies depending on the
  // target type to reduce the test overhead as much as possible:
  //
  // a) For a reference target type, we use a static_cast expression
  //    modulo its extra cases.
  //
  // b) For a non-reference target type we use a ::new expression.</doc>
<fun r='_ZNSt28__do_is_static_castable_impl6__testEi'/>
<fun r='_ZNSt28__do_is_static_castable_impl6__testEz'/>
