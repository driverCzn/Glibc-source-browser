<dec f='glibc_src_2.30/posix/sys/wait.h' l='111' type='__pid_t waitpid(__pid_t __pid, int * __stat_loc, int __options)'/>
<use f='glibc_src_2.30/sysdeps/unix/sysv/linux/not-cancel.h' l='73' c='__waitpid_nocancel'/>
<doc f='glibc_src_2.30/posix/sys/wait.h' l='96'>/* Wait for a child matching PID to die.
   If PID is greater than 0, match any process whose process ID is PID.
   If PID is (pid_t) -1, match any process.
   If PID is (pid_t) 0, match any process with the
   same process group as the current process.
   If PID is less than -1, match any process whose
   process group is the absolute value of PID.
   If the WNOHANG bit is set in OPTIONS, and that child
   is not already dead, return (pid_t) 0.  If successful,
   return PID and store the dead child&apos;s status in STAT_LOC.
   Return (pid_t) -1 for errors.  If the WUNTRACED bit is
   set in OPTIONS, return status for stopped children; otherwise don&apos;t.

   This function is a cancellation point and therefore not marked with
   __THROW.  */</doc>
<use f='glibc_src_2.30/elf/pldd.c' l='212' u='c' c='wait_for_ptrace_stop'/>
<def f='glibc_src_2.30/sysdeps/unix/sysv/linux/waitpid.c' l='34' macro='1' type='__pid_t waitpid(__pid_t , int * , int )'/>
<use f='glibc_src_2.30/support/shell-container.c' l='244' u='c' c='run_command_array'/>
<use f='glibc_src_2.30/support/support_test_main.c' l='128' u='c' c='signal_handler'/>
<use f='glibc_src_2.30/support/support_test_main.c' l='394' u='c' c='support_test_main'/>
<use f='glibc_src_2.30/support/test-container.c' l='367' u='c' c='recursive_remove'/>
<use f='glibc_src_2.30/support/test-container.c' l='937' u='c' c='main'/>
<use f='glibc_src_2.30/support/test-container.c' l='1013' u='c' c='main'/>
<use f='glibc_src_2.30/support/xwaitpid.c' l='29' u='c' c='xwaitpid'/>
