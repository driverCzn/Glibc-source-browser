<dec f='include/c++/7/bits/locale_facets.h' l='2465' type='std::num_put::iter_type std::num_put::_M_insert_float(std::num_put::iter_type , std::ios_base &amp; __io, std::num_put::char_type __fill, char __mod, _ValueT __v) const'/>
<def f='include/c++/7/bits/locale_facets.tcc' l='971' ll='1101' type='_OutIter std::num_put::_M_insert_float(_OutIter __s, std::ios_base &amp; __io, _CharT __fill, char __mod, _ValueT __v) const'/>
<doc f='include/c++/7/bits/locale_facets.tcc' l='961'>// The following code uses vsnprintf (or vsprintf(), when
  // _GLIBCXX_USE_C99_STDIO is not defined) to convert floating point
  // values for insertion into a stream.  An optimization would be to
  // replace them with code that works directly on a wide buffer and
  // then use __pad to do the padding.  It would be good to replace
  // them anyway to gain back the efficiency that C++ provides by
  // knowing up front the type of the values to insert.  Also, sprintf
  // is dangerous since may lead to accidental buffer overruns.  This
  // implementation follows the C++ standard fairly directly as
  // outlined in 22.2.2.2 [lib.locale.num.put]</doc>
