<dec f='glibc_src_2.30/sysdeps/x86_64/multiarch/ifunc-impl-list.c' l='366' type='char * __strstr_sse2(const char * , const char * )'/>
<use f='glibc_src_2.30/sysdeps/x86_64/multiarch/ifunc-impl-list.c' l='366' u='r' c='__libc_ifunc_impl_list'/>
<use f='glibc_src_2.30/sysdeps/x86_64/multiarch/ifunc-impl-list.c' l='366' u='r' c='__libc_ifunc_impl_list'/>
<def f='glibc_src_2.30/string/strstr.c' l='76' macro='1' type='char * __strstr_sse2(const char * haystack, const char * needle)'/>
<dec f='glibc_src_2.30/sysdeps/x86_64/multiarch/strstr.c' l='37' type='char * __strstr_sse2(const char * , const char * )'/>
<use f='glibc_src_2.30/sysdeps/x86_64/multiarch/strstr.c' l='47' u='r' c='__libc_strstr_ifunc'/>
<doc f='glibc_src_2.30/string/strstr.c' l='64'>/* Fast strstr algorithm with guaranteed linear-time performance.
   Small needles up to size 3 use a dedicated linear search.  Longer needles
   up to size 256 use a novel modified Horspool algorithm.  It hashes pairs
   of characters to quickly skip past mismatches.  The main search loop only
   exits if the last 2 characters match, avoiding unnecessary calls to memcmp
   and allowing for a larger skip if there is no match.  A self-adapting
   filtering check is used to quickly detect mismatches in long needles.
   By limiting the needle length to 256, the shift table can be reduced to 8
   bits per entry, lowering preprocessing overhead and minimizing cache effects.
   The limit also implies worst-case performance is linear.
   Needles larger than 256 characters use the linear-time Two-Way algorithm.  */</doc>
