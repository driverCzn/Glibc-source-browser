<def f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_exp.c' l='46' ll='82' type='double specialcase(double_t tmp, uint64_t sbits, uint64_t ki)'/>
<use f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_exp.c' l='153' u='c' c='__ieee754_exp_avx'/>
<doc f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_exp.c' l='39'>/* Handle cases that may overflow or underflow when computing the result that
   is scale*(1+TMP) without intermediate rounding.  The bit representation of
   scale is in SBITS, however it has a computed exponent that may have
   overflown into the sign bit so that needs to be adjusted before using it as
   a double.  (int32_t)KI is the k used in the argument reduction and exponent
   adjustment of scale, positive k here means the result may overflow and
   negative k means the result may underflow.  */</doc>
<def f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_pow.c' l='140' ll='179' type='double specialcase(double_t tmp, uint64_t sbits, uint64_t ki)'/>
<use f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_pow.c' l='245' u='c' c='exp_inline'/>
<doc f='glibc_src_2.30/sysdeps/ieee754/dbl-64/e_pow.c' l='133'>/* Handle cases that may overflow or underflow when computing the result that
   is scale*(1+TMP) without intermediate rounding.  The bit representation of
   scale is in SBITS, however it has a computed exponent that may have
   overflown into the sign bit so that needs to be adjusted before using it as
   a double.  (int32_t)KI is the k used in the argument reduction and exponent
   adjustment of scale, positive k here means the result may overflow and
   negative k means the result may underflow.  */</doc>
