<dec f='glibc_src_2.30/sysdeps/generic/ldsodefs.h' l='1129' type='int _dl_addr_inside_object(struct link_map * l, const Elf64_Addr addr)'/>
<def f='glibc_src_2.30/elf/dl-addr-obj.c' l='63' ll='74' type='int _dl_addr_inside_object(struct link_map * l, const Elf64_Addr addr)'/>
<doc f='glibc_src_2.30/elf/dl-addr-obj.c' l='22'>/* Return non-zero if ADDR lies within one of L&apos;s loadable segments.
   We have three cases we care about.

   Case 1: addr is above a segment.
   +==================+&lt;- l_map_end
   |                  |&lt;- addr
   |------------------|&lt;- l_addr + p_vaddr + p_memsz
   |                  |
   |                  |
   |------------------|&lt;- l_addr + p_vaddr
   |------------------|&lt;- l_addr
   |                  |
   +==================+&lt;- l_map_start

   Case 2: addr is within a segments.
   +==================+&lt;- l_map_end
   |                  |
   |------------------|&lt;- l_addr + p_vaddr + p_memsz
   |                  |&lt;- addr
   |                  |
   |------------------|&lt;- l_addr + p_vaddr
   |------------------|&lt;- l_addr
   |                  |
   +==================+&lt;- l_map_start

   Case 3: addr is below a segments.
   +==================+&lt;- l_map_end
   |                  |
   |------------------|&lt;- l_addr + p_vaddr + p_memsz
   |                  |
   |                  |
   |------------------|&lt;- l_addr + p_vaddr
   |------------------|&lt;- l_addr
   |                  |&lt;- addr
   +==================+&lt;- l_map_start

   All the arithmetic is unsigned and we shift all the values down by
   l_addr + p_vaddr and then compare the normalized addr to the range
   of interest i.e. 0 &lt;= addr &lt; p_memsz.

*/</doc>
<use f='glibc_src_2.30/elf/dl-iteratephdr.c' l='58' u='c' c='__dl_iterate_phdr'/>
<use f='glibc_src_2.30/elf/dl-open.c' l='171' u='c' c='__GI__dl_find_dso_for_object'/>
