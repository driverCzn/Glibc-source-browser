<def f='glibc_src_2.30/string/str-two-way.h' l='117' ll='212' type='size_t critical_factorization(const unsigned char * needle, size_t needle_len, size_t * period)'/>
<use f='glibc_src_2.30/string/str-two-way.h' l='236' u='c' c='two_way_short_needle'/>
<use f='glibc_src_2.30/string/str-two-way.h' l='402' u='c' c='two_way_long_needle'/>
<doc f='glibc_src_2.30/string/str-two-way.h' l='94'>/* Perform a critical factorization of NEEDLE, of length NEEDLE_LEN.
   Return the index of the first byte in the right half, and set
   *PERIOD to the global period of the right half.

   The global period of a string is the smallest index (possibly its
   length) at which all remaining bytes in the string are repetitions
   of the prefix (the last repetition may be a subset of the prefix).

   When NEEDLE is factored into two halves, a local period is the
   length of the smallest word that shares a suffix with the left half
   and shares a prefix with the right half.  All factorizations of a
   non-empty NEEDLE have a local period of at least 1 and no greater
   than NEEDLE_LEN.

   A critical factorization has the property that the local period
   equals the global period.  All strings have at least one critical
   factorization with the left half smaller than the global period.

   Given an ordered alphabet, a critical factorization can be computed
   in linear time, with 2 * NEEDLE_LEN comparisons, by computing the
   larger of two ordered maximal suffixes.  The ordered maximal
   suffixes are determined by lexicographic comparison of
   periodicity.  */</doc>
